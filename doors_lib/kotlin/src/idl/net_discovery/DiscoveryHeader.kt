// automatically generated by the FlatBuffers compiler, do not modify

package net_discovery

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class DiscoveryHeader : Struct() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DiscoveryHeader {
        __init(_i, _bb)
        return this
    }
    val len : ULong get() = bb.getLong(bb_pos + 0).toULong()
    val discoveryType : UInt get() = bb.getInt(bb_pos + 8).toUInt()
    val version : UShort get() = bb.getShort(bb_pos + 12).toUShort()
    val toTerminalId : base.TerminalId? get() = toTerminalId(base.TerminalId())
    fun toTerminalId(obj: base.TerminalId) : base.TerminalId? = obj.__assign(bb_pos + 16, bb)
    val key : base.Uint128? get() = key(base.Uint128())
    fun key(obj: base.Uint128) : base.Uint128? = obj.__assign(bb_pos + 32, bb)
    companion object {
        fun createDiscoveryHeader(builder: FlatBufferBuilder, len: ULong, discoveryType: UInt, version: UShort, toTerminalId_low: ULong, toTerminalId_high: ULong, key_low: ULong, key_high: ULong) : Int {
            builder.prep(8, 48)
            builder.prep(8, 16)
            builder.putLong(key_high.toLong())
            builder.putLong(key_low.toLong())
            builder.prep(8, 16)
            builder.putLong(to_terminal_id_high.toLong())
            builder.putLong(to_terminal_id_low.toLong())
            builder.pad(2)
            builder.putShort(version.toShort())
            builder.putInt(discoveryType.toInt())
            builder.putLong(len.toLong())
            return builder.offset()
        }
    }
}
