// automatically generated by the FlatBuffers compiler, do not modify

package net_discovery

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class DnsTerminal : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DnsTerminal {
        __init(_i, _bb)
        return this
    }
    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val parterId : base.PartnerId? get() = parterId(base.PartnerId())
    fun parterId(obj: base.PartnerId) : base.PartnerId? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val terminalId : base.TerminalId? get() = terminalId(base.TerminalId())
    fun terminalId(obj: base.TerminalId) : base.TerminalId? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val hostName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hostNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun hostNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val ipV4 : UInt
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val portV4 : UShort
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val ipV6 : ULong
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    val portV6 : UShort
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsDnsTerminal(_bb: ByteBuffer): DnsTerminal = getRootAsDnsTerminal(_bb, DnsTerminal())
        fun getRootAsDnsTerminal(_bb: ByteBuffer, obj: DnsTerminal): DnsTerminal {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startDnsTerminal(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addStruct(0, id, 0)
        fun addParterId(builder: FlatBufferBuilder, parterId: Int) = builder.addStruct(1, parterId, 0)
        fun addTerminalId(builder: FlatBufferBuilder, terminalId: Int) = builder.addStruct(2, terminalId, 0)
        fun addHostName(builder: FlatBufferBuilder, hostName: Int) = builder.addOffset(3, hostName, 0)
        fun addIpV4(builder: FlatBufferBuilder, ipV4: UInt) = builder.addInt(4, ipV4.toInt(), 0)
        fun addPortV4(builder: FlatBufferBuilder, portV4: UShort) = builder.addShort(5, portV4.toShort(), 0)
        fun addIpV6(builder: FlatBufferBuilder, ipV6: ULong) = builder.addLong(6, ipV6.toLong(), 0)
        fun addPortV6(builder: FlatBufferBuilder, portV6: UShort) = builder.addShort(7, portV6.toShort(), 0)
        fun endDnsTerminal(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
