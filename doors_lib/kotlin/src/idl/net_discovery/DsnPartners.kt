// automatically generated by the FlatBuffers compiler, do not modify

package net_discovery

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class DsnPartners : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DsnPartners {
        __init(_i, _bb)
        return this
    }
    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val aueryId : base.UlidBytes? get() = aueryId(base.UlidBytes())
    fun aueryId(obj: base.UlidBytes) : base.UlidBytes? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    fun dnsPartners(j: Int) : net_discovery.DnsTerminal? = dnsPartners(net_discovery.DnsTerminal(), j)
    fun dnsPartners(obj: net_discovery.DnsTerminal, j: Int) : net_discovery.DnsTerminal? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val dnsPartnersLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsDsnPartners(_bb: ByteBuffer): DsnPartners = getRootAsDsnPartners(_bb, DsnPartners())
        fun getRootAsDsnPartners(_bb: ByteBuffer, obj: DsnPartners): DsnPartners {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startDsnPartners(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addStruct(0, id, 0)
        fun addAueryId(builder: FlatBufferBuilder, aueryId: Int) = builder.addStruct(1, aueryId, 0)
        fun addDnsPartners(builder: FlatBufferBuilder, dnsPartners: Int) = builder.addOffset(2, dnsPartners, 0)
        fun createDnsPartnersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDnsPartnersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endDsnPartners(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
