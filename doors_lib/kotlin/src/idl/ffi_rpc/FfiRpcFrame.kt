// automatically generated by the FlatBuffers compiler, do not modify

package ffi_rpc

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class FfiRpcFrame : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FfiRpcFrame {
        __init(_i, _bb)
        return this
    }
    val header : ffi_rpc.FfiRpcHeader? get() = header(ffi_rpc.FfiRpcHeader())
    fun header(obj: ffi_rpc.FfiRpcHeader) : ffi_rpc.FfiRpcHeader? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    fun bytes(j: Int) : Byte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1)
        } else {
            0
        }
    }
    val bytesLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val bytesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun bytesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsFfiRpcFrame(_bb: ByteBuffer): FfiRpcFrame = getRootAsFfiRpcFrame(_bb, FfiRpcFrame())
        fun getRootAsFfiRpcFrame(_bb: ByteBuffer, obj: FfiRpcFrame): FfiRpcFrame {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startFfiRpcFrame(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addHeader(builder: FlatBufferBuilder, header: Int) = builder.addStruct(0, header, 0)
        fun addBytes(builder: FlatBufferBuilder, bytes: Int) = builder.addOffset(1, bytes, 0)
        fun createBytesVector(builder: FlatBufferBuilder, data: ByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i])
            }
            return builder.endVector()
        }
        fun startBytesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endFfiRpcFrame(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFfiRpcFrameBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedFfiRpcFrameBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
