// automatically generated by the FlatBuffers compiler, do not modify

package netDiscovery

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class NetInterface : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : NetInterface = reset(i, buffer)

    val ipV4 : UInt get() = lookupField(4, 0u ) { bb.getUInt(it + bufferPos) }

    val portV4 : UShort get() = lookupField(6, 0u ) { bb.getUShort(it + bufferPos) }

    val ipV6Global : ULong get() = lookupField(8, 0UL ) { bb.getULong(it + bufferPos) }

    val portV6Global : UShort get() = lookupField(10, 0u ) { bb.getUShort(it + bufferPos) }

    val ipV6Temporary : ULong get() = lookupField(12, 0UL ) { bb.getULong(it + bufferPos) }

    val portV6Temporary : UShort get() = lookupField(14, 0u ) { bb.getUShort(it + bufferPos) }

    val ipV6LinkLocal : ULong get() = lookupField(16, 0UL ) { bb.getULong(it + bufferPos) }

    val portV6LinkLocal : UShort get() = lookupField(18, 0u ) { bb.getUShort(it + bufferPos) }

    val scopeV6 : UInt get() = lookupField(20, 0u ) { bb.getUInt(it + bufferPos) }

    val ipV6UniqueLocal : ULong get() = lookupField(22, 0UL ) { bb.getULong(it + bufferPos) }

    val portV6UniqueLocal : UShort get() = lookupField(24, 0u ) { bb.getUShort(it + bufferPos) }

    val name : String? get() = lookupField(26, null ) { string(it + bufferPos) }
    fun nameAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 26, 1)

    val macAddress : String? get() = lookupField(28, null ) { string(it + bufferPos) }
    fun macAddressAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 28, 1)

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : NetInterface = asRoot(buffer, NetInterface())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: NetInterface) : NetInterface = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun createNetInterface(builder: FlatBufferBuilder, ipV4: UInt, portV4: UShort, ipV6Global: ULong, portV6Global: UShort, ipV6Temporary: ULong, portV6Temporary: UShort, ipV6LinkLocal: ULong, portV6LinkLocal: UShort, scopeV6: UInt, ipV6UniqueLocal: ULong, portV6UniqueLocal: UShort, nameOffset: Offset<String>, macAddressOffset: Offset<String>) : Offset<NetInterface> {
            builder.startTable(13)
            addIpV6UniqueLocal(builder, ipV6UniqueLocal)
            addIpV6LinkLocal(builder, ipV6LinkLocal)
            addIpV6Temporary(builder, ipV6Temporary)
            addIpV6Global(builder, ipV6Global)
            addMacAddress(builder, macAddressOffset)
            addName(builder, nameOffset)
            addScopeV6(builder, scopeV6)
            addIpV4(builder, ipV4)
            addPortV6UniqueLocal(builder, portV6UniqueLocal)
            addPortV6LinkLocal(builder, portV6LinkLocal)
            addPortV6Temporary(builder, portV6Temporary)
            addPortV6Global(builder, portV6Global)
            addPortV4(builder, portV4)
            return endNetInterface(builder)
        }
        @JvmStatic
        fun startNetInterface(builder: FlatBufferBuilder) = builder.startTable(13)

        @JvmStatic
        fun addIpV4(builder: FlatBufferBuilder, ipV4: UInt) = builder.add(0, ipV4, 0u)

        @JvmStatic
        fun addPortV4(builder: FlatBufferBuilder, portV4: UShort) = builder.add(1, portV4, 0u)

        @JvmStatic
        fun addIpV6Global(builder: FlatBufferBuilder, ipV6Global: ULong) = builder.add(2, ipV6Global, 0UL)

        @JvmStatic
        fun addPortV6Global(builder: FlatBufferBuilder, portV6Global: UShort) = builder.add(3, portV6Global, 0u)

        @JvmStatic
        fun addIpV6Temporary(builder: FlatBufferBuilder, ipV6Temporary: ULong) = builder.add(4, ipV6Temporary, 0UL)

        @JvmStatic
        fun addPortV6Temporary(builder: FlatBufferBuilder, portV6Temporary: UShort) = builder.add(5, portV6Temporary, 0u)

        @JvmStatic
        fun addIpV6LinkLocal(builder: FlatBufferBuilder, ipV6LinkLocal: ULong) = builder.add(6, ipV6LinkLocal, 0UL)

        @JvmStatic
        fun addPortV6LinkLocal(builder: FlatBufferBuilder, portV6LinkLocal: UShort) = builder.add(7, portV6LinkLocal, 0u)

        @JvmStatic
        fun addScopeV6(builder: FlatBufferBuilder, scopeV6: UInt) = builder.add(8, scopeV6, 0u)

        @JvmStatic
        fun addIpV6UniqueLocal(builder: FlatBufferBuilder, ipV6UniqueLocal: ULong) = builder.add(9, ipV6UniqueLocal, 0UL)

        @JvmStatic
        fun addPortV6UniqueLocal(builder: FlatBufferBuilder, portV6UniqueLocal: UShort) = builder.add(10, portV6UniqueLocal, 0u)

        @JvmStatic
        fun addName(builder: FlatBufferBuilder, name: Offset<String>) = builder.add(11, name, 0)

        @JvmStatic
        fun addMacAddress(builder: FlatBufferBuilder, macAddress: Offset<String>) = builder.add(12, macAddress, 0)

        @JvmStatic
        fun endNetInterface(builder: FlatBufferBuilder) : Offset<NetInterface> {
            val o: Offset<NetInterface> = builder.endTable()
            return o
        }
    }
}

typealias NetInterfaceOffsetArray = OffsetArray<NetInterface>

inline fun NetInterfaceOffsetArray(size: Int, crossinline call: (Int) -> Offset<NetInterface>): NetInterfaceOffsetArray =
    NetInterfaceOffsetArray(IntArray(size) { call(it).value })
