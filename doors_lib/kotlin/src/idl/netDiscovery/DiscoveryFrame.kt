// automatically generated by the FlatBuffers compiler, do not modify

package netDiscovery

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class DiscoveryFrame : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : DiscoveryFrame = reset(i, buffer)

    val header : base.Header? get() = header(base.Header())
    fun header(obj: base.Header) : base.Header? = lookupField(4, null ) { obj.init(it + bufferPos, bb) }

    fun bytes(j: Int) : Byte = lookupField(6, 0 ) { bb.get(vector(it) + j * 1) }
    val bytesLength : Int get() = lookupField(6, 0 ) { vectorLength(it) }
    fun bytesAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 6, 1)

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : DiscoveryFrame = asRoot(buffer, DiscoveryFrame())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: DiscoveryFrame) : DiscoveryFrame = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun startDiscoveryFrame(builder: FlatBufferBuilder) = builder.startTable(2)

        @JvmStatic
        fun addHeader(builder: FlatBufferBuilder, header: Offset<base.Header>) = builder.addStruct(0, header.value, 0)

        @JvmStatic
        fun addBytes(builder: FlatBufferBuilder, bytes: VectorOffset<Byte>) = builder.add(1, bytes, 0)

        @JvmStatic
        fun createBytesVector(builder: FlatBufferBuilder, vector:ByteArray) : VectorOffset<Byte> {
            builder.startVector(1, vector.size, 1)
            for (i in vector.size - 1 downTo 0) {
                builder.add(vector[i])
            }
            return builder.endVector()
        }

        @JvmStatic
        fun startBytesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)

        @JvmStatic
        fun endDiscoveryFrame(builder: FlatBufferBuilder) : Offset<DiscoveryFrame> {
            val o: Offset<DiscoveryFrame> = builder.endTable()
            return o
        }

        @JvmStatic
        fun finishDiscoveryFrameBuffer(builder: FlatBufferBuilder, offset: Offset<DiscoveryFrame>) = builder.finish(offset)

        @JvmStatic
        fun finishSizePrefixedDiscoveryFrameBuffer(builder: FlatBufferBuilder, offset: Offset<DiscoveryFrame>) = builder.finishSizePrefixed(offset)
    }
}

typealias DiscoveryFrameOffsetArray = OffsetArray<DiscoveryFrame>

inline fun DiscoveryFrameOffsetArray(size: Int, crossinline call: (Int) -> Offset<DiscoveryFrame>): DiscoveryFrameOffsetArray =
    DiscoveryFrameOffsetArray(IntArray(size) { call(it).value })
