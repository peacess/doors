// automatically generated by the FlatBuffers compiler, do not modify

package netDiscovery

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class DnsTerminal : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : DnsTerminal = reset(i, buffer)

    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? = lookupField(4, null ) { obj.init(it + bufferPos, bb) }

    val parterId : base.PartnerId? get() = parterId(base.PartnerId())
    fun parterId(obj: base.PartnerId) : base.PartnerId? = lookupField(6, null ) { obj.init(it + bufferPos, bb) }

    val terminalId : base.TerminalId? get() = terminalId(base.TerminalId())
    fun terminalId(obj: base.TerminalId) : base.TerminalId? = lookupField(8, null ) { obj.init(it + bufferPos, bb) }

    val hostName : String? get() = lookupField(10, null ) { string(it + bufferPos) }
    fun hostNameAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 10, 1)

    val ipV4 : UInt get() = lookupField(12, 0u ) { bb.getUInt(it + bufferPos) }

    val portV4 : UShort get() = lookupField(14, 0u ) { bb.getUShort(it + bufferPos) }

    val ipV6 : ULong get() = lookupField(16, 0UL ) { bb.getULong(it + bufferPos) }

    val portV6 : UShort get() = lookupField(18, 0u ) { bb.getUShort(it + bufferPos) }

    val key : base.X25519Public? get() = key(base.X25519Public())
    fun key(obj: base.X25519Public) : base.X25519Public? = lookupField(20, null ) { obj.init(it + bufferPos, bb) }

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : DnsTerminal = asRoot(buffer, DnsTerminal())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: DnsTerminal) : DnsTerminal = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun startDnsTerminal(builder: FlatBufferBuilder) = builder.startTable(9)

        @JvmStatic
        fun addId(builder: FlatBufferBuilder, id: Offset<base.UlidBytes>) = builder.addStruct(0, id.value, 0)

        @JvmStatic
        fun addParterId(builder: FlatBufferBuilder, parterId: Offset<base.PartnerId>) = builder.addStruct(1, parterId.value, 0)

        @JvmStatic
        fun addTerminalId(builder: FlatBufferBuilder, terminalId: Offset<base.TerminalId>) = builder.addStruct(2, terminalId.value, 0)

        @JvmStatic
        fun addHostName(builder: FlatBufferBuilder, hostName: Offset<String>) = builder.add(3, hostName, 0)

        @JvmStatic
        fun addIpV4(builder: FlatBufferBuilder, ipV4: UInt) = builder.add(4, ipV4, 0u)

        @JvmStatic
        fun addPortV4(builder: FlatBufferBuilder, portV4: UShort) = builder.add(5, portV4, 0u)

        @JvmStatic
        fun addIpV6(builder: FlatBufferBuilder, ipV6: ULong) = builder.add(6, ipV6, 0UL)

        @JvmStatic
        fun addPortV6(builder: FlatBufferBuilder, portV6: UShort) = builder.add(7, portV6, 0u)

        @JvmStatic
        fun addKey(builder: FlatBufferBuilder, key: Offset<base.X25519Public>) = builder.addStruct(8, key.value, 0)

        @JvmStatic
        fun endDnsTerminal(builder: FlatBufferBuilder) : Offset<DnsTerminal> {
            val o: Offset<DnsTerminal> = builder.endTable()
            return o
        }
    }
}

typealias DnsTerminalOffsetArray = OffsetArray<DnsTerminal>

inline fun DnsTerminalOffsetArray(size: Int, crossinline call: (Int) -> Offset<DnsTerminal>): DnsTerminalOffsetArray =
    DnsTerminalOffsetArray(IntArray(size) { call(it).value })
