// automatically generated by the FlatBuffers compiler, do not modify

package netDiscovery

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class QueryPartnersOut : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : QueryPartnersOut = reset(i, buffer)

    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? = lookupField(4, null ) { obj.init(it + bufferPos, bb) }

    val inId : base.UlidBytes? get() = inId(base.UlidBytes())
    fun inId(obj: base.UlidBytes) : base.UlidBytes? = lookupField(6, null ) { obj.init(it + bufferPos, bb) }

    fun dnsPartners(j: Int) : netDiscovery.DnsTerminal? = dnsPartners(netDiscovery.DnsTerminal(), j)
    fun dnsPartners(obj: netDiscovery.DnsTerminal, j: Int) : netDiscovery.DnsTerminal? = lookupField(8, null ) { obj.init(indirect(vector(it) + j * 4), bb) }
    val dnsPartnersLength : Int get() = lookupField(8, 0 ) { vectorLength(it) }

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : QueryPartnersOut = asRoot(buffer, QueryPartnersOut())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: QueryPartnersOut) : QueryPartnersOut = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun startQueryPartnersOut(builder: FlatBufferBuilder) = builder.startTable(3)

        @JvmStatic
        fun addId(builder: FlatBufferBuilder, id: Offset<base.UlidBytes>) = builder.addStruct(0, id.value, 0)

        @JvmStatic
        fun addInId(builder: FlatBufferBuilder, inId: Offset<base.UlidBytes>) = builder.addStruct(1, inId.value, 0)

        @JvmStatic
        fun addDnsPartners(builder: FlatBufferBuilder, dnsPartners: VectorOffset<netDiscovery.DnsTerminal>) = builder.add(2, dnsPartners, 0)

        @JvmStatic
        fun createDnsPartnersVector(builder: FlatBufferBuilder, vector:netDiscovery.DnsTerminalOffsetArray) : VectorOffset<netDiscovery.DnsTerminal> {
            builder.startVector(4, vector.size, 4)
            for (i in vector.size - 1 downTo 0) {
                builder.add(vector[i])
            }
            return builder.endVector()
        }

        @JvmStatic
        fun startDnsPartnersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)

        @JvmStatic
        fun endQueryPartnersOut(builder: FlatBufferBuilder) : Offset<QueryPartnersOut> {
            val o: Offset<QueryPartnersOut> = builder.endTable()
            return o
        }
    }
}

typealias QueryPartnersOutOffsetArray = OffsetArray<QueryPartnersOut>

inline fun QueryPartnersOutOffsetArray(size: Int, crossinline call: (Int) -> Offset<QueryPartnersOut>): QueryPartnersOutOffsetArray =
    QueryPartnersOutOffsetArray(IntArray(size) { call(it).value })
