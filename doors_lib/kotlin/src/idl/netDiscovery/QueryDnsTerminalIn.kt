// automatically generated by the FlatBuffers compiler, do not modify

package netDiscovery

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class QueryDnsTerminalIn : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : QueryDnsTerminalIn = reset(i, buffer)

    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? = lookupField(4, null ) { obj.init(it + bufferPos, bb) }

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : QueryDnsTerminalIn = asRoot(buffer, QueryDnsTerminalIn())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: QueryDnsTerminalIn) : QueryDnsTerminalIn = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun startQueryDnsTerminalIn(builder: FlatBufferBuilder) = builder.startTable(1)

        @JvmStatic
        fun addId(builder: FlatBufferBuilder, id: Offset<base.UlidBytes>) = builder.addStruct(0, id.value, 0)

        @JvmStatic
        fun endQueryDnsTerminalIn(builder: FlatBufferBuilder) : Offset<QueryDnsTerminalIn> {
            val o: Offset<QueryDnsTerminalIn> = builder.endTable()
            return o
        }
    }
}

typealias QueryDnsTerminalInOffsetArray = OffsetArray<QueryDnsTerminalIn>

inline fun QueryDnsTerminalInOffsetArray(size: Int, crossinline call: (Int) -> Offset<QueryDnsTerminalIn>): QueryDnsTerminalInOffsetArray =
    QueryDnsTerminalInOffsetArray(IntArray(size) { call(it).value })
