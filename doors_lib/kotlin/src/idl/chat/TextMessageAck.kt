// automatically generated by the FlatBuffers compiler, do not modify

package chat

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class TextMessageAck : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : TextMessageAck = reset(i, buffer)

    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? = lookupField(4, null ) { obj.init(it + bufferPos, bb) }

    val sendId : base.UlidBytes? get() = sendId(base.UlidBytes())
    fun sendId(obj: base.UlidBytes) : base.UlidBytes? = lookupField(6, null ) { obj.init(it + bufferPos, bb) }

    val ts : base.Timestamp? get() = ts(base.Timestamp())
    fun ts(obj: base.Timestamp) : base.Timestamp? = lookupField(8, null ) { obj.init(it + bufferPos, bb) }

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : TextMessageAck = asRoot(buffer, TextMessageAck())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: TextMessageAck) : TextMessageAck = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun startTextMessageAck(builder: FlatBufferBuilder) = builder.startTable(3)

        @JvmStatic
        fun addId(builder: FlatBufferBuilder, id: Offset<base.UlidBytes>) = builder.addStruct(0, id.value, 0)

        @JvmStatic
        fun addSendId(builder: FlatBufferBuilder, sendId: Offset<base.UlidBytes>) = builder.addStruct(1, sendId.value, 0)

        @JvmStatic
        fun addTs(builder: FlatBufferBuilder, ts: Offset<base.Timestamp>) = builder.addStruct(2, ts.value, 0)

        @JvmStatic
        fun endTextMessageAck(builder: FlatBufferBuilder) : Offset<TextMessageAck> {
            val o: Offset<TextMessageAck> = builder.endTable()
            return o
        }
    }
}

typealias TextMessageAckOffsetArray = OffsetArray<TextMessageAck>

inline fun TextMessageAckOffsetArray(size: Int, crossinline call: (Int) -> Offset<TextMessageAck>): TextMessageAckOffsetArray =
    TextMessageAckOffsetArray(IntArray(size) { call(it).value })
