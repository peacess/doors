// automatically generated by the FlatBuffers compiler, do not modify

package chat

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class TextMessageAck : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TextMessageAck {
        __init(_i, _bb)
        return this
    }
    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val sendId : base.UlidBytes? get() = sendId(base.UlidBytes())
    fun sendId(obj: base.UlidBytes) : base.UlidBytes? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val ts : base.Timestamp? get() = ts(base.Timestamp())
    fun ts(obj: base.Timestamp) : base.Timestamp? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsTextMessageAck(_bb: ByteBuffer): TextMessageAck = getRootAsTextMessageAck(_bb, TextMessageAck())
        fun getRootAsTextMessageAck(_bb: ByteBuffer, obj: TextMessageAck): TextMessageAck {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startTextMessageAck(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addStruct(0, id, 0)
        fun addSendId(builder: FlatBufferBuilder, sendId: Int) = builder.addStruct(1, sendId, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addStruct(2, ts, 0)
        fun endTextMessageAck(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
