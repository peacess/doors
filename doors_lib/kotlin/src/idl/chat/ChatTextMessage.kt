// automatically generated by the FlatBuffers compiler, do not modify

package chat

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class ChatTextMessage : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : ChatTextMessage = reset(i, buffer)

    val header : base.Header? get() = header(base.Header())
    fun header(obj: base.Header) : base.Header? = lookupField(4, null ) { obj.init(it + bufferPos, bb) }

    val message : chat.TextMessage? get() = message(chat.TextMessage())
    fun message(obj: chat.TextMessage) : chat.TextMessage? = lookupField(6, null ) { obj.init(indirect(it + bufferPos), bb) }

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : ChatTextMessage = asRoot(buffer, ChatTextMessage())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: ChatTextMessage) : ChatTextMessage = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun startChatTextMessage(builder: FlatBufferBuilder) = builder.startTable(2)

        @JvmStatic
        fun addHeader(builder: FlatBufferBuilder, header: Offset<base.Header>) = builder.addStruct(0, header.value, 0)

        @JvmStatic
        fun addMessage(builder: FlatBufferBuilder, message: Offset<chat.TextMessage>) = builder.add(1, message, 0)

        @JvmStatic
        fun endChatTextMessage(builder: FlatBufferBuilder) : Offset<ChatTextMessage> {
            val o: Offset<ChatTextMessage> = builder.endTable()
            return o
        }
    }
}

typealias ChatTextMessageOffsetArray = OffsetArray<ChatTextMessage>

inline fun ChatTextMessageOffsetArray(size: Int, crossinline call: (Int) -> Offset<ChatTextMessage>): ChatTextMessageOffsetArray =
    ChatTextMessageOffsetArray(IntArray(size) { call(it).value })
