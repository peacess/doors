// automatically generated by the FlatBuffers compiler, do not modify

package chat

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class ChatTextMessage : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ChatTextMessage {
        __init(_i, _bb)
        return this
    }
    val header : base.Header? get() = header(base.Header())
    fun header(obj: base.Header) : base.Header? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val message : chat.TextMessage? get() = message(chat.TextMessage())
    fun message(obj: chat.TextMessage) : chat.TextMessage? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsChatTextMessage(_bb: ByteBuffer): ChatTextMessage = getRootAsChatTextMessage(_bb, ChatTextMessage())
        fun getRootAsChatTextMessage(_bb: ByteBuffer, obj: ChatTextMessage): ChatTextMessage {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startChatTextMessage(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addHeader(builder: FlatBufferBuilder, header: Int) = builder.addStruct(0, header, 0)
        fun addMessage(builder: FlatBufferBuilder, message: Int) = builder.addOffset(1, message, 0)
        fun endChatTextMessage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
