// automatically generated by the FlatBuffers compiler, do not modify

package chat

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class TextMessage : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : TextMessage = reset(i, buffer)

    val id : base.UlidBytes? get() = id(base.UlidBytes())
    fun id(obj: base.UlidBytes) : base.UlidBytes? = lookupField(4, null ) { obj.init(it + bufferPos, bb) }

    val fromPartnerId : base.PartnerId? get() = fromPartnerId(base.PartnerId())
    fun fromPartnerId(obj: base.PartnerId) : base.PartnerId? = lookupField(6, null ) { obj.init(it + bufferPos, bb) }

    val toPartnerId : base.PartnerId? get() = toPartnerId(base.PartnerId())
    fun toPartnerId(obj: base.PartnerId) : base.PartnerId? = lookupField(8, null ) { obj.init(it + bufferPos, bb) }

    val fromTerminalId : base.TerminalId? get() = fromTerminalId(base.TerminalId())
    fun fromTerminalId(obj: base.TerminalId) : base.TerminalId? = lookupField(10, null ) { obj.init(it + bufferPos, bb) }

    val toTerminalId : base.TerminalId? get() = toTerminalId(base.TerminalId())
    fun toTerminalId(obj: base.TerminalId) : base.TerminalId? = lookupField(12, null ) { obj.init(it + bufferPos, bb) }

    val ts : base.Timestamp? get() = ts(base.Timestamp())
    fun ts(obj: base.Timestamp) : base.Timestamp? = lookupField(14, null ) { obj.init(it + bufferPos, bb) }

    val text : String? get() = lookupField(16, null ) { string(it + bufferPos) }
    fun textAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 16, 1)

    companion object {
        @JvmStatic
        fun validateVersion() = VERSION_2_0_8

        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer) : TextMessage = asRoot(buffer, TextMessage())
        @JvmStatic
        fun asRoot(buffer: ReadWriteBuffer, obj: TextMessage) : TextMessage = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        @JvmStatic
        fun startTextMessage(builder: FlatBufferBuilder) = builder.startTable(7)

        @JvmStatic
        fun addId(builder: FlatBufferBuilder, id: Offset<base.UlidBytes>) = builder.addStruct(0, id.value, 0)

        @JvmStatic
        fun addFromPartnerId(builder: FlatBufferBuilder, fromPartnerId: Offset<base.PartnerId>) = builder.addStruct(1, fromPartnerId.value, 0)

        @JvmStatic
        fun addToPartnerId(builder: FlatBufferBuilder, toPartnerId: Offset<base.PartnerId>) = builder.addStruct(2, toPartnerId.value, 0)

        @JvmStatic
        fun addFromTerminalId(builder: FlatBufferBuilder, fromTerminalId: Offset<base.TerminalId>) = builder.addStruct(3, fromTerminalId.value, 0)

        @JvmStatic
        fun addToTerminalId(builder: FlatBufferBuilder, toTerminalId: Offset<base.TerminalId>) = builder.addStruct(4, toTerminalId.value, 0)

        @JvmStatic
        fun addTs(builder: FlatBufferBuilder, ts: Offset<base.Timestamp>) = builder.addStruct(5, ts.value, 0)

        @JvmStatic
        fun addText(builder: FlatBufferBuilder, text: Offset<String>) = builder.add(6, text, 0)

        @JvmStatic
        fun endTextMessage(builder: FlatBufferBuilder) : Offset<TextMessage> {
            val o: Offset<TextMessage> = builder.endTable()
            return o
        }
    }
}

typealias TextMessageOffsetArray = OffsetArray<TextMessage>

inline fun TextMessageOffsetArray(size: Int, crossinline call: (Int) -> Offset<TextMessage>): TextMessageOffsetArray =
    TextMessageOffsetArray(IntArray(size) { call(it).value })
