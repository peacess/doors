// automatically generated by the FlatBuffers compiler, do not modify

package partner

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Partner : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Partner {
        __init(_i, _bb)
        return this
    }
    val id : base.UByte16? get() = id(base.UByte16())
    fun id(obj: base.UByte16) : base.UByte16? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val terminalId : base.UByte16? get() = terminalId(base.UByte16())
    fun terminalId(obj: base.UByte16) : base.UByte16? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val partnerId : base.UByte16? get() = partnerId(base.UByte16())
    fun partnerId(obj: base.UByte16) : base.UByte16? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val ip : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ipAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun ipInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val port : Short
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getShort(o + bb_pos) else 0
        }
    val createTs : base.Timestamp? get() = createTs(base.Timestamp())
    fun createTs(obj: base.Timestamp) : base.Timestamp? {
        val o = __offset(16)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsPartner(_bb: ByteBuffer): Partner = getRootAsPartner(_bb, Partner())
        fun getRootAsPartner(_bb: ByteBuffer, obj: Partner): Partner {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startPartner(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addStruct(0, id, 0)
        fun addTerminalId(builder: FlatBufferBuilder, terminalId: Int) = builder.addStruct(1, terminalId, 0)
        fun addPartnerId(builder: FlatBufferBuilder, partnerId: Int) = builder.addStruct(2, partnerId, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addIp(builder: FlatBufferBuilder, ip: Int) = builder.addOffset(4, ip, 0)
        fun addPort(builder: FlatBufferBuilder, port: Short) = builder.addShort(5, port, 0)
        fun addCreateTs(builder: FlatBufferBuilder, createTs: Int) = builder.addStruct(6, createTs, 0)
        fun endPartner(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
