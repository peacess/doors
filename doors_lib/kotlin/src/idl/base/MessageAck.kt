// automatically generated by the FlatBuffers compiler, do not modify

package base

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class MessageAck : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MessageAck {
        __init(_i, _bb)
        return this
    }
    val header : base.Header? get() = header(base.Header())
    fun header(obj: base.Header) : base.Header? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val id : base.UByte16? get() = id(base.UByte16())
    fun id(obj: base.UByte16) : base.UByte16? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val ts : base.Timestamp? get() = ts(base.Timestamp())
    fun ts(obj: base.Timestamp) : base.Timestamp? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsMessageAck(_bb: ByteBuffer): MessageAck = getRootAsMessageAck(_bb, MessageAck())
        fun getRootAsMessageAck(_bb: ByteBuffer, obj: MessageAck): MessageAck {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startMessageAck(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addHeader(builder: FlatBufferBuilder, header: Int) = builder.addStruct(0, header, 0)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addStruct(1, id, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addStruct(2, ts, 0)
        fun endMessageAck(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
