// automatically generated by the FlatBuffers compiler, do not modify

package base

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class MessageBody : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MessageBody {
        __init(_i, _bb)
        return this
    }
    val id : base.UByte16? get() = id(base.UByte16())
    fun id(obj: base.UByte16) : base.UByte16? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val fromId : base.UByte16? get() = fromId(base.UByte16())
    fun fromId(obj: base.UByte16) : base.UByte16? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val ts : base.Timestamp? get() = ts(base.Timestamp())
    fun ts(obj: base.Timestamp) : base.Timestamp? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val text : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun textInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsMessageBody(_bb: ByteBuffer): MessageBody = getRootAsMessageBody(_bb, MessageBody())
        fun getRootAsMessageBody(_bb: ByteBuffer, obj: MessageBody): MessageBody {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startMessageBody(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addStruct(0, id, 0)
        fun addFromId(builder: FlatBufferBuilder, fromId: Int) = builder.addStruct(1, fromId, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addStruct(2, ts, 0)
        fun addText(builder: FlatBufferBuilder, text: Int) = builder.addOffset(3, text, 0)
        fun endMessageBody(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
