// automatically generated by the FlatBuffers compiler, do not modify

package base

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class UByte8 : Struct() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UByte8 {
        __init(_i, _bb)
        return this
    }
    val ub1 : UByte get() = bb.get(bb_pos + 0).toUByte()
    val ub2 : UByte get() = bb.get(bb_pos + 1).toUByte()
    val ub3 : UByte get() = bb.get(bb_pos + 2).toUByte()
    val ub4 : UByte get() = bb.get(bb_pos + 3).toUByte()
    val ub5 : UByte get() = bb.get(bb_pos + 4).toUByte()
    val ub6 : UByte get() = bb.get(bb_pos + 5).toUByte()
    val ub7 : UByte get() = bb.get(bb_pos + 6).toUByte()
    val ub8 : UByte get() = bb.get(bb_pos + 7).toUByte()
    companion object {
        fun createUByte8(builder: FlatBufferBuilder, ub1: UByte, ub2: UByte, ub3: UByte, ub4: UByte, ub5: UByte, ub6: UByte, ub7: UByte, ub8: UByte) : Int {
            builder.prep(1, 8)
            builder.putByte(ub8.toByte())
            builder.putByte(ub7.toByte())
            builder.putByte(ub6.toByte())
            builder.putByte(ub5.toByte())
            builder.putByte(ub4.toByte())
            builder.putByte(ub3.toByte())
            builder.putByte(ub2.toByte())
            builder.putByte(ub1.toByte())
            return builder.offset()
        }
    }
}
