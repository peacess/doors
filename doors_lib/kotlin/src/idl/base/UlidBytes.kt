// automatically generated by the FlatBuffers compiler, do not modify

package base

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class UlidBytes : Struct() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UlidBytes {
        __init(_i, _bb)
        return this
    }
    val ts1 : UByte get() = bb.get(bb_pos + 0).toUByte()
    val ts2 : UByte get() = bb.get(bb_pos + 1).toUByte()
    val ts3 : UByte get() = bb.get(bb_pos + 2).toUByte()
    val ts4 : UByte get() = bb.get(bb_pos + 3).toUByte()
    val ts5 : UByte get() = bb.get(bb_pos + 4).toUByte()
    val ts6 : UByte get() = bb.get(bb_pos + 5).toUByte()
    val rand7 : UByte get() = bb.get(bb_pos + 6).toUByte()
    val rand8 : UByte get() = bb.get(bb_pos + 7).toUByte()
    val rand9 : UByte get() = bb.get(bb_pos + 8).toUByte()
    val rand10 : UByte get() = bb.get(bb_pos + 9).toUByte()
    val rand11 : UByte get() = bb.get(bb_pos + 10).toUByte()
    val rand12 : UByte get() = bb.get(bb_pos + 11).toUByte()
    val rand13 : UByte get() = bb.get(bb_pos + 12).toUByte()
    val rand14 : UByte get() = bb.get(bb_pos + 13).toUByte()
    val rand15 : UByte get() = bb.get(bb_pos + 14).toUByte()
    val rand16 : UByte get() = bb.get(bb_pos + 15).toUByte()
    companion object {
        fun createUlidBytes(builder: FlatBufferBuilder, ts1: UByte, ts2: UByte, ts3: UByte, ts4: UByte, ts5: UByte, ts6: UByte, rand7: UByte, rand8: UByte, rand9: UByte, rand10: UByte, rand11: UByte, rand12: UByte, rand13: UByte, rand14: UByte, rand15: UByte, rand16: UByte) : Int {
            builder.prep(1, 16)
            builder.putByte(rand16.toByte())
            builder.putByte(rand15.toByte())
            builder.putByte(rand14.toByte())
            builder.putByte(rand13.toByte())
            builder.putByte(rand12.toByte())
            builder.putByte(rand11.toByte())
            builder.putByte(rand10.toByte())
            builder.putByte(rand9.toByte())
            builder.putByte(rand8.toByte())
            builder.putByte(rand7.toByte())
            builder.putByte(ts6.toByte())
            builder.putByte(ts5.toByte())
            builder.putByte(ts4.toByte())
            builder.putByte(ts3.toByte())
            builder.putByte(ts2.toByte())
            builder.putByte(ts1.toByte())
            return builder.offset()
        }
    }
}
