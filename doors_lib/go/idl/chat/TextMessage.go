// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package chat

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type TextMessageT struct {
	Id             *base.UlidBytesT  `json:"id"`
	FromPartnerId  *base.PartnerIdT  `json:"from_partner_id"`
	ToPartnerId    *base.PartnerIdT  `json:"to_partner_id"`
	FromTerminalId *base.TerminalIdT `json:"from_terminal_id"`
	ToTerminalId   *base.TerminalIdT `json:"to_terminal_id"`
	Text           string            `json:"text"`
}

func (t *TextMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	TextMessageStart(builder)
	idOffset := t.Id.Pack(builder)
	TextMessageAddId(builder, idOffset)
	fromPartnerIdOffset := t.FromPartnerId.Pack(builder)
	TextMessageAddFromPartnerId(builder, fromPartnerIdOffset)
	toPartnerIdOffset := t.ToPartnerId.Pack(builder)
	TextMessageAddToPartnerId(builder, toPartnerIdOffset)
	fromTerminalIdOffset := t.FromTerminalId.Pack(builder)
	TextMessageAddFromTerminalId(builder, fromTerminalIdOffset)
	toTerminalIdOffset := t.ToTerminalId.Pack(builder)
	TextMessageAddToTerminalId(builder, toTerminalIdOffset)
	TextMessageAddText(builder, textOffset)
	return TextMessageEnd(builder)
}

func (rcv *TextMessage) UnPackTo(t *TextMessageT) {
	t.Id = rcv.Id(nil).UnPack()
	t.FromPartnerId = rcv.FromPartnerId(nil).UnPack()
	t.ToPartnerId = rcv.ToPartnerId(nil).UnPack()
	t.FromTerminalId = rcv.FromTerminalId(nil).UnPack()
	t.ToTerminalId = rcv.ToTerminalId(nil).UnPack()
	t.Text = string(rcv.Text())
}

func (rcv *TextMessage) UnPack() *TextMessageT {
	if rcv == nil {
		return nil
	}
	t := &TextMessageT{}
	rcv.UnPackTo(t)
	return t
}

type TextMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsTextMessage(buf []byte, offset flatbuffers.UOffsetT) *TextMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishTextMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTextMessage(buf []byte, offset flatbuffers.UOffsetT) *TextMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TextMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTextMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TextMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextMessage) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextMessage) FromPartnerId(obj *base.PartnerId) *base.PartnerId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.PartnerId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextMessage) ToPartnerId(obj *base.PartnerId) *base.PartnerId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.PartnerId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextMessage) FromTerminalId(obj *base.TerminalId) *base.TerminalId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.TerminalId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextMessage) ToTerminalId(obj *base.TerminalId) *base.TerminalId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.TerminalId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextMessage) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func TextMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func TextMessageAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func TextMessageAddFromPartnerId(builder *flatbuffers.Builder, fromPartnerId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(fromPartnerId), 0)
}
func TextMessageAddToPartnerId(builder *flatbuffers.Builder, toPartnerId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(toPartnerId), 0)
}
func TextMessageAddFromTerminalId(builder *flatbuffers.Builder, fromTerminalId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(fromTerminalId), 0)
}
func TextMessageAddToTerminalId(builder *flatbuffers.Builder, toTerminalId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(toTerminalId), 0)
}
func TextMessageAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(text), 0)
}
func TextMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
