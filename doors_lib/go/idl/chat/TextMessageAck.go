// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package chat

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type TextMessageAckT struct {
	Id     *base.UlidBytesT `json:"id"`
	SendId *base.UlidBytesT `json:"send_id"`
	Ts     *base.TimestampT `json:"ts"`
}

func (t *TextMessageAckT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	TextMessageAckStart(builder)
	idOffset := t.Id.Pack(builder)
	TextMessageAckAddId(builder, idOffset)
	sendIdOffset := t.SendId.Pack(builder)
	TextMessageAckAddSendId(builder, sendIdOffset)
	tsOffset := t.Ts.Pack(builder)
	TextMessageAckAddTs(builder, tsOffset)
	return TextMessageAckEnd(builder)
}

func (rcv *TextMessageAck) UnPackTo(t *TextMessageAckT) {
	t.Id = rcv.Id(nil).UnPack()
	t.SendId = rcv.SendId(nil).UnPack()
	t.Ts = rcv.Ts(nil).UnPack()
}

func (rcv *TextMessageAck) UnPack() *TextMessageAckT {
	if rcv == nil {
		return nil
	}
	t := &TextMessageAckT{}
	rcv.UnPackTo(t)
	return t
}

type TextMessageAck struct {
	_tab flatbuffers.Table
}

func GetRootAsTextMessageAck(buf []byte, offset flatbuffers.UOffsetT) *TextMessageAck {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextMessageAck{}
	x.Init(buf, n+offset)
	return x
}

func FinishTextMessageAckBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTextMessageAck(buf []byte, offset flatbuffers.UOffsetT) *TextMessageAck {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TextMessageAck{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTextMessageAckBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TextMessageAck) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextMessageAck) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextMessageAck) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextMessageAck) SendId(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextMessageAck) Ts(obj *base.Timestamp) *base.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func TextMessageAckStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TextMessageAckAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func TextMessageAckAddSendId(builder *flatbuffers.Builder, sendId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(sendId), 0)
}
func TextMessageAckAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(ts), 0)
}
func TextMessageAckEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
