// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FrameConfirmT struct {
	Id      *UlidBytesT `json:"id"`
	FrameId *UlidBytesT `json:"frame_id"`
}

func (t *FrameConfirmT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateFrameConfirm(builder, t.Id.Low, t.Id.High, t.FrameId.Low, t.FrameId.High)
}
func (rcv *FrameConfirm) UnPackTo(t *FrameConfirmT) {
	t.Id = rcv.Id(nil).UnPack()
	t.FrameId = rcv.FrameId(nil).UnPack()
}

func (rcv *FrameConfirm) UnPack() *FrameConfirmT {
	if rcv == nil {
		return nil
	}
	t := &FrameConfirmT{}
	rcv.UnPackTo(t)
	return t
}

type FrameConfirm struct {
	_tab flatbuffers.Struct
}

func (rcv *FrameConfirm) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FrameConfirm) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *FrameConfirm) Id(obj *UlidBytes) *UlidBytes {
	if obj == nil {
		obj = new(UlidBytes)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}
func (rcv *FrameConfirm) FrameId(obj *UlidBytes) *UlidBytes {
	if obj == nil {
		obj = new(UlidBytes)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+16)
	return obj
}

func CreateFrameConfirm(builder *flatbuffers.Builder, id_low uint64, id_high uint64, frame_id_low uint64, frame_id_high uint64) flatbuffers.UOffsetT {
	builder.Prep(8, 32)
	builder.Prep(8, 16)
	builder.PrependUint64(frame_id_high)
	builder.PrependUint64(frame_id_low)
	builder.Prep(8, 16)
	builder.PrependUint64(id_high)
	builder.PrependUint64(id_low)
	return builder.Offset()
}
