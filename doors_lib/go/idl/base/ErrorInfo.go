// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ErrorInfoT struct {
	Id      *UlidBytesT `json:"id"`
	ReqId   *UlidBytesT `json:"req_id"`
	Code    uint32      `json:"code"`
	Message string      `json:"message"`
}

func (t *ErrorInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	messageOffset := flatbuffers.UOffsetT(0)
	if t.Message != "" {
		messageOffset = builder.CreateString(t.Message)
	}
	ErrorInfoStart(builder)
	idOffset := t.Id.Pack(builder)
	ErrorInfoAddId(builder, idOffset)
	reqIdOffset := t.ReqId.Pack(builder)
	ErrorInfoAddReqId(builder, reqIdOffset)
	ErrorInfoAddCode(builder, t.Code)
	ErrorInfoAddMessage(builder, messageOffset)
	return ErrorInfoEnd(builder)
}

func (rcv *ErrorInfo) UnPackTo(t *ErrorInfoT) {
	t.Id = rcv.Id(nil).UnPack()
	t.ReqId = rcv.ReqId(nil).UnPack()
	t.Code = rcv.Code()
	t.Message = string(rcv.Message())
}

func (rcv *ErrorInfo) UnPack() *ErrorInfoT {
	if rcv == nil {
		return nil
	}
	t := &ErrorInfoT{}
	rcv.UnPackTo(t)
	return t
}

type ErrorInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsErrorInfo(buf []byte, offset flatbuffers.UOffsetT) *ErrorInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ErrorInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishErrorInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsErrorInfo(buf []byte, offset flatbuffers.UOffsetT) *ErrorInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ErrorInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedErrorInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ErrorInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ErrorInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ErrorInfo) Id(obj *UlidBytes) *UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ErrorInfo) ReqId(obj *UlidBytes) *UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ErrorInfo) Code() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ErrorInfo) MutateCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ErrorInfo) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ErrorInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ErrorInfoAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ErrorInfoAddReqId(builder *flatbuffers.Builder, reqId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(reqId), 0)
}
func ErrorInfoAddCode(builder *flatbuffers.Builder, code uint32) {
	builder.PrependUint32Slot(2, code, 0)
}
func ErrorInfoAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(message), 0)
}
func ErrorInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
