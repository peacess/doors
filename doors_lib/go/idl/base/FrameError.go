// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FrameErrorT struct {
	Header    *HeaderT    `json:"header"`
	ErrorInfo *ErrorInfoT `json:"error_info"`
}

func (t *FrameErrorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	errorInfoOffset := t.ErrorInfo.Pack(builder)
	FrameErrorStart(builder)
	headerOffset := t.Header.Pack(builder)
	FrameErrorAddHeader(builder, headerOffset)
	FrameErrorAddErrorInfo(builder, errorInfoOffset)
	return FrameErrorEnd(builder)
}

func (rcv *FrameError) UnPackTo(t *FrameErrorT) {
	t.Header = rcv.Header(nil).UnPack()
	t.ErrorInfo = rcv.ErrorInfo(nil).UnPack()
}

func (rcv *FrameError) UnPack() *FrameErrorT {
	if rcv == nil {
		return nil
	}
	t := &FrameErrorT{}
	rcv.UnPackTo(t)
	return t
}

type FrameError struct {
	_tab flatbuffers.Table
}

func GetRootAsFrameError(buf []byte, offset flatbuffers.UOffsetT) *FrameError {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FrameError{}
	x.Init(buf, n+offset)
	return x
}

func FinishFrameErrorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFrameError(buf []byte, offset flatbuffers.UOffsetT) *FrameError {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FrameError{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFrameErrorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FrameError) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FrameError) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FrameError) Header(obj *Header) *Header {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Header)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *FrameError) ErrorInfo(obj *ErrorInfo) *ErrorInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ErrorInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func FrameErrorStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FrameErrorAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(header), 0)
}
func FrameErrorAddErrorInfo(builder *flatbuffers.Builder, errorInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(errorInfo), 0)
}
func FrameErrorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
