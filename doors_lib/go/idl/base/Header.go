// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HeaderT struct {
	Len          uint64         `json:"len"`
	HeaderType   uint32         `json:"header_type"`
	FrameType    uint32         `json:"frame_type"`
	ToTerminalId *TerminalIdT   `json:"to_terminal_id"`
	Key          *X25519PublicT `json:"key"`
}

func (t *HeaderT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateHeader(builder, t.Len, t.HeaderType, t.FrameType, t.ToTerminalId.Low, t.ToTerminalId.High, t.Key.Key1, t.Key.Key2, t.Key.Key3, t.Key.Key4)
}
func (rcv *Header) UnPackTo(t *HeaderT) {
	t.Len = rcv.Len()
	t.HeaderType = rcv.HeaderType()
	t.FrameType = rcv.FrameType()
	t.ToTerminalId = rcv.ToTerminalId(nil).UnPack()
	t.Key = rcv.Key(nil).UnPack()
}

func (rcv *Header) UnPack() *HeaderT {
	if rcv == nil {
		return nil
	}
	t := &HeaderT{}
	rcv.UnPackTo(t)
	return t
}

type Header struct {
	_tab flatbuffers.Struct
}

func (rcv *Header) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Header) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Header) Len() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Header) MutateLen(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Header) HeaderType() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Header) MutateHeaderType(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *Header) FrameType() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *Header) MutateFrameType(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *Header) ToTerminalId(obj *TerminalId) *TerminalId {
	if obj == nil {
		obj = new(TerminalId)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+16)
	return obj
}
func (rcv *Header) Key(obj *X25519Public) *X25519Public {
	if obj == nil {
		obj = new(X25519Public)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+32)
	return obj
}

func CreateHeader(builder *flatbuffers.Builder, len uint64, headerType uint32, frameType uint32, to_terminal_id_low uint64, to_terminal_id_high uint64, key_key1 uint64, key_key2 uint64, key_key3 uint64, key_key4 uint64) flatbuffers.UOffsetT {
	builder.Prep(8, 64)
	builder.Prep(8, 32)
	builder.PrependUint64(key_key4)
	builder.PrependUint64(key_key3)
	builder.PrependUint64(key_key2)
	builder.PrependUint64(key_key1)
	builder.Prep(8, 16)
	builder.PrependUint64(to_terminal_id_high)
	builder.PrependUint64(to_terminal_id_low)
	builder.PrependUint32(frameType)
	builder.PrependUint32(headerType)
	builder.PrependUint64(len)
	return builder.Offset()
}
