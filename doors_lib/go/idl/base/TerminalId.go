// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TerminalIdT struct {
	Low  uint64 `json:"low"`
	High uint64 `json:"high"`
}

func (t *TerminalIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateTerminalId(builder, t.Low, t.High)
}
func (rcv *TerminalId) UnPackTo(t *TerminalIdT) {
	t.Low = rcv.Low()
	t.High = rcv.High()
}

func (rcv *TerminalId) UnPack() *TerminalIdT {
	if rcv == nil {
		return nil
	}
	t := &TerminalIdT{}
	rcv.UnPackTo(t)
	return t
}

type TerminalId struct {
	_tab flatbuffers.Struct
}

func (rcv *TerminalId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TerminalId) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *TerminalId) Low() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *TerminalId) MutateLow(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *TerminalId) High() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *TerminalId) MutateHigh(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateTerminalId(builder *flatbuffers.Builder, low uint64, high uint64) flatbuffers.UOffsetT {
	builder.Prep(8, 16)
	builder.PrependUint64(high)
	builder.PrependUint64(low)
	return builder.Offset()
}
