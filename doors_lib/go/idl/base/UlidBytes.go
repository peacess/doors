// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UlidBytes struct {
	_tab flatbuffers.Struct
}

func (rcv *UlidBytes) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UlidBytes) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *UlidBytes) Ts1() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *UlidBytes) MutateTs1(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *UlidBytes) Ts2() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *UlidBytes) MutateTs2(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *UlidBytes) Ts3() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *UlidBytes) MutateTs3(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *UlidBytes) Ts4() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(3))
}
func (rcv *UlidBytes) MutateTs4(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(3), n)
}

func (rcv *UlidBytes) Ts5() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *UlidBytes) MutateTs5(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *UlidBytes) Ts6() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(5))
}
func (rcv *UlidBytes) MutateTs6(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(5), n)
}

func (rcv *UlidBytes) Rand7() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}
func (rcv *UlidBytes) MutateRand7(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func (rcv *UlidBytes) Rand8() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(7))
}
func (rcv *UlidBytes) MutateRand8(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(7), n)
}

func (rcv *UlidBytes) Rand9() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *UlidBytes) MutateRand9(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *UlidBytes) Rand10() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(9))
}
func (rcv *UlidBytes) MutateRand10(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(9), n)
}

func (rcv *UlidBytes) Rand11() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(10))
}
func (rcv *UlidBytes) MutateRand11(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(10), n)
}

func (rcv *UlidBytes) Rand12() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(11))
}
func (rcv *UlidBytes) MutateRand12(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(11), n)
}

func (rcv *UlidBytes) Rand13() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *UlidBytes) MutateRand13(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *UlidBytes) Rand14() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(13))
}
func (rcv *UlidBytes) MutateRand14(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(13), n)
}

func (rcv *UlidBytes) Rand15() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(14))
}
func (rcv *UlidBytes) MutateRand15(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(14), n)
}

func (rcv *UlidBytes) Rand16() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(15))
}
func (rcv *UlidBytes) MutateRand16(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(15), n)
}

func CreateUlidBytes(builder *flatbuffers.Builder, ts1 byte, ts2 byte, ts3 byte, ts4 byte, ts5 byte, ts6 byte, rand7 byte, rand8 byte, rand9 byte, rand10 byte, rand11 byte, rand12 byte, rand13 byte, rand14 byte, rand15 byte, rand16 byte) flatbuffers.UOffsetT {
	builder.Prep(1, 16)
	builder.PrependByte(rand16)
	builder.PrependByte(rand15)
	builder.PrependByte(rand14)
	builder.PrependByte(rand13)
	builder.PrependByte(rand12)
	builder.PrependByte(rand11)
	builder.PrependByte(rand10)
	builder.PrependByte(rand9)
	builder.PrependByte(rand8)
	builder.PrependByte(rand7)
	builder.PrependByte(ts6)
	builder.PrependByte(ts5)
	builder.PrependByte(ts4)
	builder.PrependByte(ts3)
	builder.PrependByte(ts2)
	builder.PrependByte(ts1)
	return builder.Offset()
}
