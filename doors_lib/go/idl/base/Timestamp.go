// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimestampT struct {
	Ts int64 `json:"ts"`
}

func (t *TimestampT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateTimestamp(builder, t.Ts)
}
func (rcv *Timestamp) UnPackTo(t *TimestampT) {
	t.Ts = rcv.Ts()
}

func (rcv *Timestamp) UnPack() *TimestampT {
	if rcv == nil {
		return nil
	}
	t := &TimestampT{}
	rcv.UnPackTo(t)
	return t
}

type Timestamp struct {
	_tab flatbuffers.Struct
}

func (rcv *Timestamp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Timestamp) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Timestamp) Ts() int64 {
	return rcv._tab.GetInt64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Timestamp) MutateTs(n int64) bool {
	return rcv._tab.MutateInt64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func CreateTimestamp(builder *flatbuffers.Builder, ts int64) flatbuffers.UOffsetT {
	builder.Prep(8, 8)
	builder.PrependInt64(ts)
	return builder.Offset()
}
