// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UByte16T struct {
	Ub1  byte `json:"ub1"`
	Ub2  byte `json:"ub2"`
	Ub3  byte `json:"ub3"`
	Ub4  byte `json:"ub4"`
	Ub5  byte `json:"ub5"`
	Ub6  byte `json:"ub6"`
	Ub7  byte `json:"ub7"`
	Ub8  byte `json:"ub8"`
	Ub9  byte `json:"ub9"`
	Ub10 byte `json:"ub10"`
	Ub11 byte `json:"ub11"`
	Ub12 byte `json:"ub12"`
	Ub13 byte `json:"ub13"`
	Ub14 byte `json:"ub14"`
	Ub15 byte `json:"ub15"`
	Ub16 byte `json:"ub16"`
}

func (t *UByte16T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateUByte16(builder, t.Ub1, t.Ub2, t.Ub3, t.Ub4, t.Ub5, t.Ub6, t.Ub7, t.Ub8, t.Ub9, t.Ub10, t.Ub11, t.Ub12, t.Ub13, t.Ub14, t.Ub15, t.Ub16)
}
func (rcv *UByte16) UnPackTo(t *UByte16T) {
	t.Ub1 = rcv.Ub1()
	t.Ub2 = rcv.Ub2()
	t.Ub3 = rcv.Ub3()
	t.Ub4 = rcv.Ub4()
	t.Ub5 = rcv.Ub5()
	t.Ub6 = rcv.Ub6()
	t.Ub7 = rcv.Ub7()
	t.Ub8 = rcv.Ub8()
	t.Ub9 = rcv.Ub9()
	t.Ub10 = rcv.Ub10()
	t.Ub11 = rcv.Ub11()
	t.Ub12 = rcv.Ub12()
	t.Ub13 = rcv.Ub13()
	t.Ub14 = rcv.Ub14()
	t.Ub15 = rcv.Ub15()
	t.Ub16 = rcv.Ub16()
}

func (rcv *UByte16) UnPack() *UByte16T {
	if rcv == nil {
		return nil
	}
	t := &UByte16T{}
	rcv.UnPackTo(t)
	return t
}

type UByte16 struct {
	_tab flatbuffers.Struct
}

func (rcv *UByte16) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UByte16) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *UByte16) Ub1() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *UByte16) MutateUb1(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *UByte16) Ub2() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *UByte16) MutateUb2(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *UByte16) Ub3() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *UByte16) MutateUb3(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *UByte16) Ub4() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(3))
}
func (rcv *UByte16) MutateUb4(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(3), n)
}

func (rcv *UByte16) Ub5() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *UByte16) MutateUb5(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *UByte16) Ub6() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(5))
}
func (rcv *UByte16) MutateUb6(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(5), n)
}

func (rcv *UByte16) Ub7() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}
func (rcv *UByte16) MutateUb7(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func (rcv *UByte16) Ub8() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(7))
}
func (rcv *UByte16) MutateUb8(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(7), n)
}

func (rcv *UByte16) Ub9() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *UByte16) MutateUb9(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *UByte16) Ub10() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(9))
}
func (rcv *UByte16) MutateUb10(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(9), n)
}

func (rcv *UByte16) Ub11() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(10))
}
func (rcv *UByte16) MutateUb11(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(10), n)
}

func (rcv *UByte16) Ub12() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(11))
}
func (rcv *UByte16) MutateUb12(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(11), n)
}

func (rcv *UByte16) Ub13() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *UByte16) MutateUb13(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *UByte16) Ub14() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(13))
}
func (rcv *UByte16) MutateUb14(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(13), n)
}

func (rcv *UByte16) Ub15() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(14))
}
func (rcv *UByte16) MutateUb15(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(14), n)
}

func (rcv *UByte16) Ub16() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(15))
}
func (rcv *UByte16) MutateUb16(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(15), n)
}

func CreateUByte16(builder *flatbuffers.Builder, ub1 byte, ub2 byte, ub3 byte, ub4 byte, ub5 byte, ub6 byte, ub7 byte, ub8 byte, ub9 byte, ub10 byte, ub11 byte, ub12 byte, ub13 byte, ub14 byte, ub15 byte, ub16 byte) flatbuffers.UOffsetT {
	builder.Prep(1, 16)
	builder.PrependByte(ub16)
	builder.PrependByte(ub15)
	builder.PrependByte(ub14)
	builder.PrependByte(ub13)
	builder.PrependByte(ub12)
	builder.PrependByte(ub11)
	builder.PrependByte(ub10)
	builder.PrependByte(ub9)
	builder.PrependByte(ub8)
	builder.PrependByte(ub7)
	builder.PrependByte(ub6)
	builder.PrependByte(ub5)
	builder.PrependByte(ub4)
	builder.PrependByte(ub3)
	builder.PrependByte(ub2)
	builder.PrependByte(ub1)
	return builder.Offset()
}
