// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UByte8T struct {
	Ub1 byte `json:"ub1"`
	Ub2 byte `json:"ub2"`
	Ub3 byte `json:"ub3"`
	Ub4 byte `json:"ub4"`
	Ub5 byte `json:"ub5"`
	Ub6 byte `json:"ub6"`
	Ub7 byte `json:"ub7"`
	Ub8 byte `json:"ub8"`
}

func (t *UByte8T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateUByte8(builder, t.Ub1, t.Ub2, t.Ub3, t.Ub4, t.Ub5, t.Ub6, t.Ub7, t.Ub8)
}
func (rcv *UByte8) UnPackTo(t *UByte8T) {
	t.Ub1 = rcv.Ub1()
	t.Ub2 = rcv.Ub2()
	t.Ub3 = rcv.Ub3()
	t.Ub4 = rcv.Ub4()
	t.Ub5 = rcv.Ub5()
	t.Ub6 = rcv.Ub6()
	t.Ub7 = rcv.Ub7()
	t.Ub8 = rcv.Ub8()
}

func (rcv *UByte8) UnPack() *UByte8T {
	if rcv == nil {
		return nil
	}
	t := &UByte8T{}
	rcv.UnPackTo(t)
	return t
}

type UByte8 struct {
	_tab flatbuffers.Struct
}

func (rcv *UByte8) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UByte8) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *UByte8) Ub1() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *UByte8) MutateUb1(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *UByte8) Ub2() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *UByte8) MutateUb2(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *UByte8) Ub3() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *UByte8) MutateUb3(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *UByte8) Ub4() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(3))
}
func (rcv *UByte8) MutateUb4(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(3), n)
}

func (rcv *UByte8) Ub5() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *UByte8) MutateUb5(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *UByte8) Ub6() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(5))
}
func (rcv *UByte8) MutateUb6(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(5), n)
}

func (rcv *UByte8) Ub7() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}
func (rcv *UByte8) MutateUb7(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func (rcv *UByte8) Ub8() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(7))
}
func (rcv *UByte8) MutateUb8(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(7), n)
}

func CreateUByte8(builder *flatbuffers.Builder, ub1 byte, ub2 byte, ub3 byte, ub4 byte, ub5 byte, ub6 byte, ub7 byte, ub8 byte) flatbuffers.UOffsetT {
	builder.Prep(1, 8)
	builder.PrependByte(ub8)
	builder.PrependByte(ub7)
	builder.PrependByte(ub6)
	builder.PrependByte(ub5)
	builder.PrependByte(ub4)
	builder.PrependByte(ub3)
	builder.PrependByte(ub2)
	builder.PrependByte(ub1)
	return builder.Offset()
}
