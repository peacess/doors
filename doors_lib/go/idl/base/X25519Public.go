// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package base

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type X25519PublicT struct {
	Key1 uint64 `json:"key1"`
	Key2 uint64 `json:"key2"`
	Key3 uint64 `json:"key3"`
	Key4 uint64 `json:"key4"`
}

func (t *X25519PublicT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateX25519Public(builder, t.Key1, t.Key2, t.Key3, t.Key4)
}
func (rcv *X25519Public) UnPackTo(t *X25519PublicT) {
	t.Key1 = rcv.Key1()
	t.Key2 = rcv.Key2()
	t.Key3 = rcv.Key3()
	t.Key4 = rcv.Key4()
}

func (rcv *X25519Public) UnPack() *X25519PublicT {
	if rcv == nil {
		return nil
	}
	t := &X25519PublicT{}
	rcv.UnPackTo(t)
	return t
}

type X25519Public struct {
	_tab flatbuffers.Struct
}

func (rcv *X25519Public) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *X25519Public) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *X25519Public) Key1() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *X25519Public) MutateKey1(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *X25519Public) Key2() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *X25519Public) MutateKey2(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *X25519Public) Key3() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *X25519Public) MutateKey3(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *X25519Public) Key4() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(24))
}
func (rcv *X25519Public) MutateKey4(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(24), n)
}

func CreateX25519Public(builder *flatbuffers.Builder, key1 uint64, key2 uint64, key3 uint64, key4 uint64) flatbuffers.UOffsetT {
	builder.Prep(8, 32)
	builder.PrependUint64(key4)
	builder.PrependUint64(key3)
	builder.PrependUint64(key2)
	builder.PrependUint64(key1)
	return builder.Offset()
}
