// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package partner

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type PartnerT struct {
	Id          *base.UlidBytesT    `json:"id"`
	TerminalIds []*base.TerminalIdT `json:"terminal_ids"`
	PartnerId   *base.PartnerIdT    `json:"partner_id"`
	ShowName    string              `json:"show_name"`
}

func (t *PartnerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	terminalIdsOffset := flatbuffers.UOffsetT(0)
	if t.TerminalIds != nil {
		terminalIdsLength := len(t.TerminalIds)
		PartnerStartTerminalIdsVector(builder, terminalIdsLength)
		for j := terminalIdsLength - 1; j >= 0; j-- {
			t.TerminalIds[j].Pack(builder)
		}
		terminalIdsOffset = builder.EndVector(terminalIdsLength)
	}
	showNameOffset := flatbuffers.UOffsetT(0)
	if t.ShowName != "" {
		showNameOffset = builder.CreateString(t.ShowName)
	}
	PartnerStart(builder)
	idOffset := t.Id.Pack(builder)
	PartnerAddId(builder, idOffset)
	PartnerAddTerminalIds(builder, terminalIdsOffset)
	partnerIdOffset := t.PartnerId.Pack(builder)
	PartnerAddPartnerId(builder, partnerIdOffset)
	PartnerAddShowName(builder, showNameOffset)
	return PartnerEnd(builder)
}

func (rcv *Partner) UnPackTo(t *PartnerT) {
	t.Id = rcv.Id(nil).UnPack()
	terminalIdsLength := rcv.TerminalIdsLength()
	t.TerminalIds = make([]*base.TerminalIdT, terminalIdsLength)
	for j := 0; j < terminalIdsLength; j++ {
		x := base.TerminalId{}
		rcv.TerminalIds(&x, j)
		t.TerminalIds[j] = x.UnPack()
	}
	t.PartnerId = rcv.PartnerId(nil).UnPack()
	t.ShowName = string(rcv.ShowName())
}

func (rcv *Partner) UnPack() *PartnerT {
	if rcv == nil {
		return nil
	}
	t := &PartnerT{}
	rcv.UnPackTo(t)
	return t
}

type Partner struct {
	_tab flatbuffers.Table
}

func GetRootAsPartner(buf []byte, offset flatbuffers.UOffsetT) *Partner {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Partner{}
	x.Init(buf, n+offset)
	return x
}

func FinishPartnerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPartner(buf []byte, offset flatbuffers.UOffsetT) *Partner {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Partner{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPartnerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Partner) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Partner) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Partner) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Partner) TerminalIds(obj *base.TerminalId, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Partner) TerminalIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Partner) PartnerId(obj *base.PartnerId) *base.PartnerId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.PartnerId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Partner) ShowName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PartnerStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PartnerAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func PartnerAddTerminalIds(builder *flatbuffers.Builder, terminalIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(terminalIds), 0)
}
func PartnerStartTerminalIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func PartnerAddPartnerId(builder *flatbuffers.Builder, partnerId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(partnerId), 0)
}
func PartnerAddShowName(builder *flatbuffers.Builder, showName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(showName), 0)
}
func PartnerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
