// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type DnsPartner struct {
	_tab flatbuffers.Table
}

func GetRootAsDnsPartner(buf []byte, offset flatbuffers.UOffsetT) *DnsPartner {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DnsPartner{}
	x.Init(buf, n+offset)
	return x
}

func FinishDnsPartnerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDnsPartner(buf []byte, offset flatbuffers.UOffsetT) *DnsPartner {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DnsPartner{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDnsPartnerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DnsPartner) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DnsPartner) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DnsPartner) ParterId(obj *base.PartnerId) *base.PartnerId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.PartnerId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsPartner) TerminalId(obj *base.TerminalId) *base.TerminalId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.TerminalId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsPartner) HostName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DnsPartner) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DnsPartner) Port() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DnsPartner) MutatePort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func DnsPartnerStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DnsPartnerAddParterId(builder *flatbuffers.Builder, parterId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(parterId), 0)
}
func DnsPartnerAddTerminalId(builder *flatbuffers.Builder, terminalId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(terminalId), 0)
}
func DnsPartnerAddHostName(builder *flatbuffers.Builder, hostName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(hostName), 0)
}
func DnsPartnerAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ip), 0)
}
func DnsPartnerAddPort(builder *flatbuffers.Builder, port uint16) {
	builder.PrependUint16Slot(4, port, 0)
}
func DnsPartnerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
