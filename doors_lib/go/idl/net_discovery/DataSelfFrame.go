// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type DataSelfFrameT struct {
	Header   *base.HeaderT `json:"header"`
	DataSelf *DataSelfT    `json:"data_self"`
}

func (t *DataSelfFrameT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dataSelfOffset := t.DataSelf.Pack(builder)
	DataSelfFrameStart(builder)
	headerOffset := t.Header.Pack(builder)
	DataSelfFrameAddHeader(builder, headerOffset)
	DataSelfFrameAddDataSelf(builder, dataSelfOffset)
	return DataSelfFrameEnd(builder)
}

func (rcv *DataSelfFrame) UnPackTo(t *DataSelfFrameT) {
	t.Header = rcv.Header(nil).UnPack()
	t.DataSelf = rcv.DataSelf(nil).UnPack()
}

func (rcv *DataSelfFrame) UnPack() *DataSelfFrameT {
	if rcv == nil {
		return nil
	}
	t := &DataSelfFrameT{}
	rcv.UnPackTo(t)
	return t
}

type DataSelfFrame struct {
	_tab flatbuffers.Table
}

func GetRootAsDataSelfFrame(buf []byte, offset flatbuffers.UOffsetT) *DataSelfFrame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataSelfFrame{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataSelfFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDataSelfFrame(buf []byte, offset flatbuffers.UOffsetT) *DataSelfFrame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataSelfFrame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataSelfFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DataSelfFrame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataSelfFrame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DataSelfFrame) Header(obj *base.Header) *base.Header {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.Header)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DataSelfFrame) DataSelf(obj *DataSelf) *DataSelf {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DataSelf)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DataSelfFrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DataSelfFrameAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(header), 0)
}
func DataSelfFrameAddDataSelf(builder *flatbuffers.Builder, dataSelf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dataSelf), 0)
}
func DataSelfFrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
