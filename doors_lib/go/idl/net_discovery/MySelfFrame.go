// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type MySelfFrameT struct {
	Header *base.HeaderT `json:"header"`
	MySelf *MySelfT      `json:"my_self"`
}

func (t *MySelfFrameT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	MySelfFrameStart(builder)
	headerOffset := t.Header.Pack(builder)
	MySelfFrameAddHeader(builder, headerOffset)
	mySelfOffset := t.MySelf.Pack(builder)
	MySelfFrameAddMySelf(builder, mySelfOffset)
	return MySelfFrameEnd(builder)
}

func (rcv *MySelfFrame) UnPackTo(t *MySelfFrameT) {
	t.Header = rcv.Header(nil).UnPack()
	t.MySelf = rcv.MySelf(nil).UnPack()
}

func (rcv *MySelfFrame) UnPack() *MySelfFrameT {
	if rcv == nil {
		return nil
	}
	t := &MySelfFrameT{}
	rcv.UnPackTo(t)
	return t
}

type MySelfFrame struct {
	_tab flatbuffers.Table
}

func GetRootAsMySelfFrame(buf []byte, offset flatbuffers.UOffsetT) *MySelfFrame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MySelfFrame{}
	x.Init(buf, n+offset)
	return x
}

func FinishMySelfFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMySelfFrame(buf []byte, offset flatbuffers.UOffsetT) *MySelfFrame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MySelfFrame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMySelfFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MySelfFrame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MySelfFrame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MySelfFrame) Header(obj *base.Header) *base.Header {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.Header)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MySelfFrame) MySelf(obj *MySelf) *MySelf {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(MySelf)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MySelfFrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MySelfFrameAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(header), 0)
}
func MySelfFrameAddMySelf(builder *flatbuffers.Builder, mySelf flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(mySelf), 0)
}
func MySelfFrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
