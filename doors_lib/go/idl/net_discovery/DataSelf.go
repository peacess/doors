// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type DataSelfT struct {
	Id          *base.UlidBytesT `json:"id"`
	DnsTerminal *DnsTerminalT    `json:"dns_terminal"`
}

func (t *DataSelfT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dnsTerminalOffset := t.DnsTerminal.Pack(builder)
	DataSelfStart(builder)
	idOffset := t.Id.Pack(builder)
	DataSelfAddId(builder, idOffset)
	DataSelfAddDnsTerminal(builder, dnsTerminalOffset)
	return DataSelfEnd(builder)
}

func (rcv *DataSelf) UnPackTo(t *DataSelfT) {
	t.Id = rcv.Id(nil).UnPack()
	t.DnsTerminal = rcv.DnsTerminal(nil).UnPack()
}

func (rcv *DataSelf) UnPack() *DataSelfT {
	if rcv == nil {
		return nil
	}
	t := &DataSelfT{}
	rcv.UnPackTo(t)
	return t
}

type DataSelf struct {
	_tab flatbuffers.Table
}

func GetRootAsDataSelf(buf []byte, offset flatbuffers.UOffsetT) *DataSelf {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataSelf{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataSelfBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDataSelf(buf []byte, offset flatbuffers.UOffsetT) *DataSelf {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataSelf{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataSelfBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DataSelf) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataSelf) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DataSelf) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DataSelf) DnsTerminal(obj *DnsTerminal) *DnsTerminal {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DnsTerminal)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DataSelfStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DataSelfAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DataSelfAddDnsTerminal(builder *flatbuffers.Builder, dnsTerminal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dnsTerminal), 0)
}
func DataSelfEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
