// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type HiT struct {
	Id          *base.UlidBytesT `json:"id"`
	DnsTerminal *DnsTerminalT    `json:"dns_terminal"`
	ShowName    string           `json:"show_name"`
}

func (t *HiT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dnsTerminalOffset := t.DnsTerminal.Pack(builder)
	showNameOffset := flatbuffers.UOffsetT(0)
	if t.ShowName != "" {
		showNameOffset = builder.CreateString(t.ShowName)
	}
	HiStart(builder)
	idOffset := t.Id.Pack(builder)
	HiAddId(builder, idOffset)
	HiAddDnsTerminal(builder, dnsTerminalOffset)
	HiAddShowName(builder, showNameOffset)
	return HiEnd(builder)
}

func (rcv *Hi) UnPackTo(t *HiT) {
	t.Id = rcv.Id(nil).UnPack()
	t.DnsTerminal = rcv.DnsTerminal(nil).UnPack()
	t.ShowName = string(rcv.ShowName())
}

func (rcv *Hi) UnPack() *HiT {
	if rcv == nil {
		return nil
	}
	t := &HiT{}
	rcv.UnPackTo(t)
	return t
}

type Hi struct {
	_tab flatbuffers.Table
}

func GetRootAsHi(buf []byte, offset flatbuffers.UOffsetT) *Hi {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Hi{}
	x.Init(buf, n+offset)
	return x
}

func FinishHiBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHi(buf []byte, offset flatbuffers.UOffsetT) *Hi {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Hi{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHiBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Hi) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Hi) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Hi) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Hi) DnsTerminal(obj *DnsTerminal) *DnsTerminal {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DnsTerminal)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Hi) ShowName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func HiStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func HiAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func HiAddDnsTerminal(builder *flatbuffers.Builder, dnsTerminal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dnsTerminal), 0)
}
func HiAddShowName(builder *flatbuffers.Builder, showName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(showName), 0)
}
func HiEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
