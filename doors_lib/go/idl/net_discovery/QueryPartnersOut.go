// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type QueryPartnersOutT struct {
	Id          *base.UlidBytesT `json:"id"`
	InId        *base.UlidBytesT `json:"in_id"`
	DnsPartners []*DnsTerminalT  `json:"dns_partners"`
}

func (t *QueryPartnersOutT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dnsPartnersOffset := flatbuffers.UOffsetT(0)
	if t.DnsPartners != nil {
		dnsPartnersLength := len(t.DnsPartners)
		dnsPartnersOffsets := make([]flatbuffers.UOffsetT, dnsPartnersLength)
		for j := 0; j < dnsPartnersLength; j++ {
			dnsPartnersOffsets[j] = t.DnsPartners[j].Pack(builder)
		}
		QueryPartnersOutStartDnsPartnersVector(builder, dnsPartnersLength)
		for j := dnsPartnersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(dnsPartnersOffsets[j])
		}
		dnsPartnersOffset = builder.EndVector(dnsPartnersLength)
	}
	QueryPartnersOutStart(builder)
	idOffset := t.Id.Pack(builder)
	QueryPartnersOutAddId(builder, idOffset)
	inIdOffset := t.InId.Pack(builder)
	QueryPartnersOutAddInId(builder, inIdOffset)
	QueryPartnersOutAddDnsPartners(builder, dnsPartnersOffset)
	return QueryPartnersOutEnd(builder)
}

func (rcv *QueryPartnersOut) UnPackTo(t *QueryPartnersOutT) {
	t.Id = rcv.Id(nil).UnPack()
	t.InId = rcv.InId(nil).UnPack()
	dnsPartnersLength := rcv.DnsPartnersLength()
	t.DnsPartners = make([]*DnsTerminalT, dnsPartnersLength)
	for j := 0; j < dnsPartnersLength; j++ {
		x := DnsTerminal{}
		rcv.DnsPartners(&x, j)
		t.DnsPartners[j] = x.UnPack()
	}
}

func (rcv *QueryPartnersOut) UnPack() *QueryPartnersOutT {
	if rcv == nil {
		return nil
	}
	t := &QueryPartnersOutT{}
	rcv.UnPackTo(t)
	return t
}

type QueryPartnersOut struct {
	_tab flatbuffers.Table
}

func GetRootAsQueryPartnersOut(buf []byte, offset flatbuffers.UOffsetT) *QueryPartnersOut {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QueryPartnersOut{}
	x.Init(buf, n+offset)
	return x
}

func FinishQueryPartnersOutBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsQueryPartnersOut(buf []byte, offset flatbuffers.UOffsetT) *QueryPartnersOut {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &QueryPartnersOut{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedQueryPartnersOutBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *QueryPartnersOut) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QueryPartnersOut) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QueryPartnersOut) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *QueryPartnersOut) InId(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *QueryPartnersOut) DnsPartners(obj *DnsTerminal, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *QueryPartnersOut) DnsPartnersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func QueryPartnersOutStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func QueryPartnersOutAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func QueryPartnersOutAddInId(builder *flatbuffers.Builder, inId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(inId), 0)
}
func QueryPartnersOutAddDnsPartners(builder *flatbuffers.Builder, dnsPartners flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dnsPartners), 0)
}
func QueryPartnersOutStartDnsPartnersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func QueryPartnersOutEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
