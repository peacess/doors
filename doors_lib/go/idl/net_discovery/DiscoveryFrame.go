// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DiscoveryFrame struct {
	_tab flatbuffers.Table
}

func GetRootAsDiscoveryFrame(buf []byte, offset flatbuffers.UOffsetT) *DiscoveryFrame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiscoveryFrame{}
	x.Init(buf, n+offset)
	return x
}

func FinishDiscoveryFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDiscoveryFrame(buf []byte, offset flatbuffers.UOffsetT) *DiscoveryFrame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiscoveryFrame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDiscoveryFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DiscoveryFrame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiscoveryFrame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DiscoveryFrame) Header(obj *DiscoveryHeader) *DiscoveryHeader {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(DiscoveryHeader)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DiscoveryFrame) Bytes(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *DiscoveryFrame) BytesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DiscoveryFrame) MutateBytes(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func DiscoveryFrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DiscoveryFrameAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(header), 0)
}
func DiscoveryFrameAddBytes(builder *flatbuffers.Builder, bytes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bytes), 0)
}
func DiscoveryFrameStartBytesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DiscoveryFrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
