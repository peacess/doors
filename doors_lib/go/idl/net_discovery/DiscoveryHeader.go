// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type DiscoveryHeader struct {
	_tab flatbuffers.Struct
}

func (rcv *DiscoveryHeader) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiscoveryHeader) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *DiscoveryHeader) Len() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *DiscoveryHeader) MutateLen(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *DiscoveryHeader) DiscoveryType() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *DiscoveryHeader) MutateDiscoveryType(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *DiscoveryHeader) Version() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *DiscoveryHeader) MutateVersion(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *DiscoveryHeader) ToTerminalId(obj *base.TerminalId) *base.TerminalId {
	if obj == nil {
		obj = new(base.TerminalId)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+16)
	return obj
}
func (rcv *DiscoveryHeader) Key(obj *base.Uint128) *base.Uint128 {
	if obj == nil {
		obj = new(base.Uint128)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+32)
	return obj
}

func CreateDiscoveryHeader(builder *flatbuffers.Builder, len uint64, discoveryType uint32, version uint16, to_terminal_id_low uint64, to_terminal_id_high uint64, key_low uint64, key_high uint64) flatbuffers.UOffsetT {
	builder.Prep(8, 48)
	builder.Prep(8, 16)
	builder.PrependUint64(key_high)
	builder.PrependUint64(key_low)
	builder.Prep(8, 16)
	builder.PrependUint64(to_terminal_id_high)
	builder.PrependUint64(to_terminal_id_low)
	builder.Pad(2)
	builder.PrependUint16(version)
	builder.PrependUint32(discoveryType)
	builder.PrependUint64(len)
	return builder.Offset()
}
