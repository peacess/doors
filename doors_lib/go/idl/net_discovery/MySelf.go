// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type MySelfT struct {
	Id *base.UlidBytesT `json:"id"`
}

func (t *MySelfT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateMySelf(builder, t.Id.Low, t.Id.High)
}
func (rcv *MySelf) UnPackTo(t *MySelfT) {
	t.Id = rcv.Id(nil).UnPack()
}

func (rcv *MySelf) UnPack() *MySelfT {
	if rcv == nil {
		return nil
	}
	t := &MySelfT{}
	rcv.UnPackTo(t)
	return t
}

type MySelf struct {
	_tab flatbuffers.Struct
}

func (rcv *MySelf) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MySelf) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *MySelf) Id(obj *base.UlidBytes) *base.UlidBytes {
	if obj == nil {
		obj = new(base.UlidBytes)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}

func CreateMySelf(builder *flatbuffers.Builder, id_low uint64, id_high uint64) flatbuffers.UOffsetT {
	builder.Prep(8, 16)
	builder.Prep(8, 16)
	builder.PrependUint64(id_high)
	builder.PrependUint64(id_low)
	return builder.Offset()
}
