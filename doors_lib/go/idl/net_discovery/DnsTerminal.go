// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type DnsTerminalT struct {
	Id         *base.UlidBytesT    `json:"id"`
	ParterId   *base.PartnerIdT    `json:"parter_id"`
	TerminalId *base.TerminalIdT   `json:"terminal_id"`
	HostName   string              `json:"host_name"`
	IpV4       uint32              `json:"ip_v4"`
	PortV4     uint16              `json:"port_v4"`
	IpV6       uint64              `json:"ip_v6"`
	PortV6     uint16              `json:"port_v6"`
	Key        *base.X25519PublicT `json:"key"`
}

func (t *DnsTerminalT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	hostNameOffset := flatbuffers.UOffsetT(0)
	if t.HostName != "" {
		hostNameOffset = builder.CreateString(t.HostName)
	}
	DnsTerminalStart(builder)
	idOffset := t.Id.Pack(builder)
	DnsTerminalAddId(builder, idOffset)
	parterIdOffset := t.ParterId.Pack(builder)
	DnsTerminalAddParterId(builder, parterIdOffset)
	terminalIdOffset := t.TerminalId.Pack(builder)
	DnsTerminalAddTerminalId(builder, terminalIdOffset)
	DnsTerminalAddHostName(builder, hostNameOffset)
	DnsTerminalAddIpV4(builder, t.IpV4)
	DnsTerminalAddPortV4(builder, t.PortV4)
	DnsTerminalAddIpV6(builder, t.IpV6)
	DnsTerminalAddPortV6(builder, t.PortV6)
	keyOffset := t.Key.Pack(builder)
	DnsTerminalAddKey(builder, keyOffset)
	return DnsTerminalEnd(builder)
}

func (rcv *DnsTerminal) UnPackTo(t *DnsTerminalT) {
	t.Id = rcv.Id(nil).UnPack()
	t.ParterId = rcv.ParterId(nil).UnPack()
	t.TerminalId = rcv.TerminalId(nil).UnPack()
	t.HostName = string(rcv.HostName())
	t.IpV4 = rcv.IpV4()
	t.PortV4 = rcv.PortV4()
	t.IpV6 = rcv.IpV6()
	t.PortV6 = rcv.PortV6()
	t.Key = rcv.Key(nil).UnPack()
}

func (rcv *DnsTerminal) UnPack() *DnsTerminalT {
	if rcv == nil {
		return nil
	}
	t := &DnsTerminalT{}
	rcv.UnPackTo(t)
	return t
}

type DnsTerminal struct {
	_tab flatbuffers.Table
}

func GetRootAsDnsTerminal(buf []byte, offset flatbuffers.UOffsetT) *DnsTerminal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DnsTerminal{}
	x.Init(buf, n+offset)
	return x
}

func FinishDnsTerminalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDnsTerminal(buf []byte, offset flatbuffers.UOffsetT) *DnsTerminal {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DnsTerminal{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDnsTerminalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DnsTerminal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DnsTerminal) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DnsTerminal) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsTerminal) ParterId(obj *base.PartnerId) *base.PartnerId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.PartnerId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsTerminal) TerminalId(obj *base.TerminalId) *base.TerminalId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.TerminalId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsTerminal) HostName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DnsTerminal) IpV4() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DnsTerminal) MutateIpV4(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *DnsTerminal) PortV4() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DnsTerminal) MutatePortV4(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

func (rcv *DnsTerminal) IpV6() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DnsTerminal) MutateIpV6(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func (rcv *DnsTerminal) PortV6() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DnsTerminal) MutatePortV6(n uint16) bool {
	return rcv._tab.MutateUint16Slot(18, n)
}

func (rcv *DnsTerminal) Key(obj *base.X25519Public) *base.X25519Public {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.X25519Public)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DnsTerminalStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func DnsTerminalAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DnsTerminalAddParterId(builder *flatbuffers.Builder, parterId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(parterId), 0)
}
func DnsTerminalAddTerminalId(builder *flatbuffers.Builder, terminalId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(terminalId), 0)
}
func DnsTerminalAddHostName(builder *flatbuffers.Builder, hostName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(hostName), 0)
}
func DnsTerminalAddIpV4(builder *flatbuffers.Builder, ipV4 uint32) {
	builder.PrependUint32Slot(4, ipV4, 0)
}
func DnsTerminalAddPortV4(builder *flatbuffers.Builder, portV4 uint16) {
	builder.PrependUint16Slot(5, portV4, 0)
}
func DnsTerminalAddIpV6(builder *flatbuffers.Builder, ipV6 uint64) {
	builder.PrependUint64Slot(6, ipV6, 0)
}
func DnsTerminalAddPortV6(builder *flatbuffers.Builder, portV6 uint16) {
	builder.PrependUint16Slot(7, portV6, 0)
}
func DnsTerminalAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependStructSlot(8, flatbuffers.UOffsetT(key), 0)
}
func DnsTerminalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
