// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type DnsTerminalT struct {
	Id            *base.UlidBytesT    `json:"id"`
	PartnerId     *base.PartnerIdT    `json:"partner_id"`
	TerminalId    *base.TerminalIdT   `json:"terminal_id"`
	Key           *base.X25519PublicT `json:"key"`
	HostName      string              `json:"host_name"`
	ShowName      string              `json:"show_name"`
	NetInterfaces []*NetInterfaceT    `json:"net_interfaces"`
}

func (t *DnsTerminalT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	hostNameOffset := flatbuffers.UOffsetT(0)
	if t.HostName != "" {
		hostNameOffset = builder.CreateString(t.HostName)
	}
	showNameOffset := flatbuffers.UOffsetT(0)
	if t.ShowName != "" {
		showNameOffset = builder.CreateString(t.ShowName)
	}
	netInterfacesOffset := flatbuffers.UOffsetT(0)
	if t.NetInterfaces != nil {
		netInterfacesLength := len(t.NetInterfaces)
		netInterfacesOffsets := make([]flatbuffers.UOffsetT, netInterfacesLength)
		for j := 0; j < netInterfacesLength; j++ {
			netInterfacesOffsets[j] = t.NetInterfaces[j].Pack(builder)
		}
		DnsTerminalStartNetInterfacesVector(builder, netInterfacesLength)
		for j := netInterfacesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(netInterfacesOffsets[j])
		}
		netInterfacesOffset = builder.EndVector(netInterfacesLength)
	}
	DnsTerminalStart(builder)
	idOffset := t.Id.Pack(builder)
	DnsTerminalAddId(builder, idOffset)
	partnerIdOffset := t.PartnerId.Pack(builder)
	DnsTerminalAddPartnerId(builder, partnerIdOffset)
	terminalIdOffset := t.TerminalId.Pack(builder)
	DnsTerminalAddTerminalId(builder, terminalIdOffset)
	keyOffset := t.Key.Pack(builder)
	DnsTerminalAddKey(builder, keyOffset)
	DnsTerminalAddHostName(builder, hostNameOffset)
	DnsTerminalAddShowName(builder, showNameOffset)
	DnsTerminalAddNetInterfaces(builder, netInterfacesOffset)
	return DnsTerminalEnd(builder)
}

func (rcv *DnsTerminal) UnPackTo(t *DnsTerminalT) {
	t.Id = rcv.Id(nil).UnPack()
	t.PartnerId = rcv.PartnerId(nil).UnPack()
	t.TerminalId = rcv.TerminalId(nil).UnPack()
	t.Key = rcv.Key(nil).UnPack()
	t.HostName = string(rcv.HostName())
	t.ShowName = string(rcv.ShowName())
	netInterfacesLength := rcv.NetInterfacesLength()
	t.NetInterfaces = make([]*NetInterfaceT, netInterfacesLength)
	for j := 0; j < netInterfacesLength; j++ {
		x := NetInterface{}
		rcv.NetInterfaces(&x, j)
		t.NetInterfaces[j] = x.UnPack()
	}
}

func (rcv *DnsTerminal) UnPack() *DnsTerminalT {
	if rcv == nil {
		return nil
	}
	t := &DnsTerminalT{}
	rcv.UnPackTo(t)
	return t
}

type DnsTerminal struct {
	_tab flatbuffers.Table
}

func GetRootAsDnsTerminal(buf []byte, offset flatbuffers.UOffsetT) *DnsTerminal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DnsTerminal{}
	x.Init(buf, n+offset)
	return x
}

func FinishDnsTerminalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDnsTerminal(buf []byte, offset flatbuffers.UOffsetT) *DnsTerminal {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DnsTerminal{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDnsTerminalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DnsTerminal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DnsTerminal) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DnsTerminal) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsTerminal) PartnerId(obj *base.PartnerId) *base.PartnerId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.PartnerId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsTerminal) TerminalId(obj *base.TerminalId) *base.TerminalId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.TerminalId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsTerminal) Key(obj *base.X25519Public) *base.X25519Public {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.X25519Public)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DnsTerminal) HostName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DnsTerminal) ShowName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DnsTerminal) NetInterfaces(obj *NetInterface, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DnsTerminal) NetInterfacesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DnsTerminalStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func DnsTerminalAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DnsTerminalAddPartnerId(builder *flatbuffers.Builder, partnerId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(partnerId), 0)
}
func DnsTerminalAddTerminalId(builder *flatbuffers.Builder, terminalId flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(terminalId), 0)
}
func DnsTerminalAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(key), 0)
}
func DnsTerminalAddHostName(builder *flatbuffers.Builder, hostName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(hostName), 0)
}
func DnsTerminalAddShowName(builder *flatbuffers.Builder, showName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(showName), 0)
}
func DnsTerminalAddNetInterfaces(builder *flatbuffers.Builder, netInterfaces flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(netInterfaces), 0)
}
func DnsTerminalStartNetInterfacesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DnsTerminalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
