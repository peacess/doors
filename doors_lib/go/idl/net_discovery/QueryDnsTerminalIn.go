// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package net_discovery

import (
	flatbuffers "github.com/google/flatbuffers/go"

	base "github.com/peacess/doors/doors_lib/go/idl/base"
)

type QueryDnsTerminalInT struct {
	Id *base.UlidBytesT `json:"id"`
}

func (t *QueryDnsTerminalInT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	QueryDnsTerminalInStart(builder)
	idOffset := t.Id.Pack(builder)
	QueryDnsTerminalInAddId(builder, idOffset)
	return QueryDnsTerminalInEnd(builder)
}

func (rcv *QueryDnsTerminalIn) UnPackTo(t *QueryDnsTerminalInT) {
	t.Id = rcv.Id(nil).UnPack()
}

func (rcv *QueryDnsTerminalIn) UnPack() *QueryDnsTerminalInT {
	if rcv == nil {
		return nil
	}
	t := &QueryDnsTerminalInT{}
	rcv.UnPackTo(t)
	return t
}

type QueryDnsTerminalIn struct {
	_tab flatbuffers.Table
}

func GetRootAsQueryDnsTerminalIn(buf []byte, offset flatbuffers.UOffsetT) *QueryDnsTerminalIn {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QueryDnsTerminalIn{}
	x.Init(buf, n+offset)
	return x
}

func FinishQueryDnsTerminalInBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsQueryDnsTerminalIn(buf []byte, offset flatbuffers.UOffsetT) *QueryDnsTerminalIn {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &QueryDnsTerminalIn{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedQueryDnsTerminalInBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *QueryDnsTerminalIn) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QueryDnsTerminalIn) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QueryDnsTerminalIn) Id(obj *base.UlidBytes) *base.UlidBytes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(base.UlidBytes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func QueryDnsTerminalInStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func QueryDnsTerminalInAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(id), 0)
}
func QueryDnsTerminalInEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
