// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `../rust/ffi_rpc/include/ffi_rpc.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class IdlBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  IdlBindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  IdlBindings.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  FfiBytes init(CallBack callback) {
    return _init(callback);
  }

  late final _initPtr = _lookup<ffi.NativeFunction<FfiBytes Function(CallBack)>>('init');
  late final _init = _initPtr.asFunction<FfiBytes Function(CallBack)>();

  FfiBytes un_init() {
    return _un_init();
  }

  late final _un_initPtr = _lookup<ffi.NativeFunction<FfiBytes Function()>>('un_init');
  late final _un_init = _un_initPtr.asFunction<FfiBytes Function()>();

  FfiBytes call(ffi.Pointer<ffi.Uint8> bytes, int length) {
    return _call(bytes, length);
  }

  late final _callPtr = _lookup<ffi.NativeFunction<FfiBytes Function(ffi.Pointer<ffi.Uint8>, ffi.Uint64)>>('call');
  late final _call = _callPtr.asFunction<FfiBytes Function(ffi.Pointer<ffi.Uint8>, int)>();

  void bytes_free(FfiBytes data) {
    return _bytes_free(data);
  }

  late final _bytes_freePtr = _lookup<ffi.NativeFunction<ffi.Void Function(FfiBytes)>>('bytes_free');
  late final _bytes_free = _bytes_freePtr.asFunction<void Function(FfiBytes)>();
}

final class FfiBytes extends ffi.Struct {
  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int offset;

  external ffi.Pointer<ffi.Uint8> bytes;
}

typedef CallBackFunction = ffi.Void Function(FfiBytes);
typedef DartCallBackFunction = void Function(FfiBytes);

/// 回调用函数的返回值在dart中并不支持，所以没有返回值
typedef CallBack = ffi.Pointer<ffi.NativeFunction<CallBackFunction>>;

const int NetIp_DEFAULT_PORT = 59933;
