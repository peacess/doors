// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library net_discovery;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './base_base_generated.dart' as base;
import './ffi_rpc_ffi_rpc_generated.dart' as ffi_rpc;

class DnsTerminal {
  DnsTerminal._(this._bc, this._bcOffset);
  factory DnsTerminal(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DnsTerminal> reader = _DnsTerminalReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  base.PartnerId? get partnerId => base.PartnerId.reader.vTableGetNullable(_bc, _bcOffset, 6);
  base.TerminalId? get terminalId => base.TerminalId.reader.vTableGetNullable(_bc, _bcOffset, 8);
  int get ipV4 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get portV4 => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get ipV6 => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get portV6 => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 16, 0);
  base.X25519Public? get key => base.X25519Public.reader.vTableGetNullable(_bc, _bcOffset, 18);
  String? get hostName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get showName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'DnsTerminal{id: ${id}, partnerId: ${partnerId}, terminalId: ${terminalId}, ipV4: ${ipV4}, portV4: ${portV4}, ipV6: ${ipV6}, portV6: ${portV6}, key: ${key}, hostName: ${hostName}, showName: ${showName}}';
  }

  DnsTerminalT unpack() => DnsTerminalT(
    id: id?.unpack(),
    partnerId: partnerId?.unpack(),
    terminalId: terminalId?.unpack(),
    ipV4: ipV4,
    portV4: portV4,
    ipV6: ipV6,
    portV6: portV6,
    key: key?.unpack(),
    hostName: hostName,
    showName: showName,
  );

  static int pack(fb.Builder fbBuilder, DnsTerminalT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class DnsTerminalT implements fb.Packable {
  base.UlidBytesT? id;
  base.PartnerIdT? partnerId;
  base.TerminalIdT? terminalId;
  int ipV4;
  int portV4;
  int ipV6;
  int portV6;
  base.X25519PublicT? key;
  String? hostName;
  String? showName;

  DnsTerminalT({
    this.id,
    this.partnerId,
    this.terminalId,
    this.ipV4 = 0,
    this.portV4 = 0,
    this.ipV6 = 0,
    this.portV6 = 0,
    this.key,
    this.hostName,
    this.showName,
  });

  @override
  int pack(fb.Builder fbBuilder) {
    final int? hostNameOffset = hostName == null ? null : fbBuilder.writeString(hostName!);
    final int? showNameOffset = showName == null ? null : fbBuilder.writeString(showName!);
    fbBuilder.startTable(10);
    if (id != null) {
      fbBuilder.addStruct(0, id!.pack(fbBuilder));
    }
    if (partnerId != null) {
      fbBuilder.addStruct(1, partnerId!.pack(fbBuilder));
    }
    if (terminalId != null) {
      fbBuilder.addStruct(2, terminalId!.pack(fbBuilder));
    }
    fbBuilder.addUint32(3, ipV4);
    fbBuilder.addUint16(4, portV4);
    fbBuilder.addUint64(5, ipV6);
    fbBuilder.addUint16(6, portV6);
    if (key != null) {
      fbBuilder.addStruct(7, key!.pack(fbBuilder));
    }
    fbBuilder.addOffset(8, hostNameOffset);
    fbBuilder.addOffset(9, showNameOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'DnsTerminalT{id: ${id}, partnerId: ${partnerId}, terminalId: ${terminalId}, ipV4: ${ipV4}, portV4: ${portV4}, ipV6: ${ipV6}, portV6: ${portV6}, key: ${key}, hostName: ${hostName}, showName: ${showName}}';
  }
}

class _DnsTerminalReader extends fb.TableReader<DnsTerminal> {
  const _DnsTerminalReader();

  @override
  DnsTerminal createObject(fb.BufferContext bc, int offset) => DnsTerminal._(bc, offset);
}

class DnsTerminalBuilder {
  DnsTerminalBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addPartnerId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addTerminalId(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int addIpV4(int? ipV4) {
    fbBuilder.addUint32(3, ipV4);
    return fbBuilder.offset;
  }

  int addPortV4(int? portV4) {
    fbBuilder.addUint16(4, portV4);
    return fbBuilder.offset;
  }

  int addIpV6(int? ipV6) {
    fbBuilder.addUint64(5, ipV6);
    return fbBuilder.offset;
  }

  int addPortV6(int? portV6) {
    fbBuilder.addUint16(6, portV6);
    return fbBuilder.offset;
  }

  int addKey(int offset) {
    fbBuilder.addStruct(7, offset);
    return fbBuilder.offset;
  }

  int addHostNameOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addShowNameOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DnsTerminalObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final base.PartnerIdObjectBuilder? _partnerId;
  final base.TerminalIdObjectBuilder? _terminalId;
  final int? _ipV4;
  final int? _portV4;
  final int? _ipV6;
  final int? _portV6;
  final base.X25519PublicObjectBuilder? _key;
  final String? _hostName;
  final String? _showName;

  DnsTerminalObjectBuilder({
    base.UlidBytesObjectBuilder? id,
    base.PartnerIdObjectBuilder? partnerId,
    base.TerminalIdObjectBuilder? terminalId,
    int? ipV4,
    int? portV4,
    int? ipV6,
    int? portV6,
    base.X25519PublicObjectBuilder? key,
    String? hostName,
    String? showName,
  }) : _id = id,
       _partnerId = partnerId,
       _terminalId = terminalId,
       _ipV4 = ipV4,
       _portV4 = portV4,
       _ipV6 = ipV6,
       _portV6 = portV6,
       _key = key,
       _hostName = hostName,
       _showName = showName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hostNameOffset = _hostName == null ? null : fbBuilder.writeString(_hostName!);
    final int? showNameOffset = _showName == null ? null : fbBuilder.writeString(_showName!);
    fbBuilder.startTable(10);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_partnerId != null) {
      fbBuilder.addStruct(1, _partnerId!.finish(fbBuilder));
    }
    if (_terminalId != null) {
      fbBuilder.addStruct(2, _terminalId!.finish(fbBuilder));
    }
    fbBuilder.addUint32(3, _ipV4);
    fbBuilder.addUint16(4, _portV4);
    fbBuilder.addUint64(5, _ipV6);
    fbBuilder.addUint16(6, _portV6);
    if (_key != null) {
      fbBuilder.addStruct(7, _key!.finish(fbBuilder));
    }
    fbBuilder.addOffset(8, hostNameOffset);
    fbBuilder.addOffset(9, showNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class HiFrame {
  HiFrame._(this._bc, this._bcOffset);
  factory HiFrame(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HiFrame> reader = _HiFrameReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.Header? get header => base.Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  Hi? get hi => Hi.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'HiFrame{header: ${header}, hi: ${hi}}';
  }

  HiFrameT unpack() => HiFrameT(header: header?.unpack(), hi: hi?.unpack());

  static int pack(fb.Builder fbBuilder, HiFrameT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class HiFrameT implements fb.Packable {
  base.HeaderT? header;
  HiT? hi;

  HiFrameT({this.header, this.hi});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? hiOffset = hi?.pack(fbBuilder);
    fbBuilder.startTable(2);
    if (header != null) {
      fbBuilder.addStruct(0, header!.pack(fbBuilder));
    }
    fbBuilder.addOffset(1, hiOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'HiFrameT{header: ${header}, hi: ${hi}}';
  }
}

class _HiFrameReader extends fb.TableReader<HiFrame> {
  const _HiFrameReader();

  @override
  HiFrame createObject(fb.BufferContext bc, int offset) => HiFrame._(bc, offset);
}

class HiFrameBuilder {
  HiFrameBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addHiOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HiFrameObjectBuilder extends fb.ObjectBuilder {
  final base.HeaderObjectBuilder? _header;
  final HiObjectBuilder? _hi;

  HiFrameObjectBuilder({base.HeaderObjectBuilder? header, HiObjectBuilder? hi}) : _header = header, _hi = hi;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hiOffset = _hi?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, hiOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Hi {
  Hi._(this._bc, this._bcOffset);
  factory Hi(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Hi> reader = _HiReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  DnsTerminal? get dnsTerminal => DnsTerminal.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get showName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Hi{id: ${id}, dnsTerminal: ${dnsTerminal}, showName: ${showName}}';
  }

  HiT unpack() => HiT(id: id?.unpack(), dnsTerminal: dnsTerminal?.unpack(), showName: showName);

  static int pack(fb.Builder fbBuilder, HiT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class HiT implements fb.Packable {
  base.UlidBytesT? id;
  DnsTerminalT? dnsTerminal;
  String? showName;

  HiT({this.id, this.dnsTerminal, this.showName});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? dnsTerminalOffset = dnsTerminal?.pack(fbBuilder);
    final int? showNameOffset = showName == null ? null : fbBuilder.writeString(showName!);
    fbBuilder.startTable(3);
    if (id != null) {
      fbBuilder.addStruct(0, id!.pack(fbBuilder));
    }
    fbBuilder.addOffset(1, dnsTerminalOffset);
    fbBuilder.addOffset(2, showNameOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'HiT{id: ${id}, dnsTerminal: ${dnsTerminal}, showName: ${showName}}';
  }
}

class _HiReader extends fb.TableReader<Hi> {
  const _HiReader();

  @override
  Hi createObject(fb.BufferContext bc, int offset) => Hi._(bc, offset);
}

class HiBuilder {
  HiBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addDnsTerminalOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addShowNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HiObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final DnsTerminalObjectBuilder? _dnsTerminal;
  final String? _showName;

  HiObjectBuilder({base.UlidBytesObjectBuilder? id, DnsTerminalObjectBuilder? dnsTerminal, String? showName})
    : _id = id,
      _dnsTerminal = dnsTerminal,
      _showName = showName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dnsTerminalOffset = _dnsTerminal?.getOrCreateOffset(fbBuilder);
    final int? showNameOffset = _showName == null ? null : fbBuilder.writeString(_showName!);
    fbBuilder.startTable(3);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, dnsTerminalOffset);
    fbBuilder.addOffset(2, showNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class QueryDnsTerminalOut {
  QueryDnsTerminalOut._(this._bc, this._bcOffset);
  factory QueryDnsTerminalOut(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QueryDnsTerminalOut> reader = _QueryDnsTerminalOutReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  base.UlidBytes? get inId => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 6);
  DnsTerminal? get dnsTerminal => DnsTerminal.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'QueryDnsTerminalOut{id: ${id}, inId: ${inId}, dnsTerminal: ${dnsTerminal}}';
  }

  QueryDnsTerminalOutT unpack() => QueryDnsTerminalOutT(id: id?.unpack(), inId: inId?.unpack(), dnsTerminal: dnsTerminal?.unpack());

  static int pack(fb.Builder fbBuilder, QueryDnsTerminalOutT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QueryDnsTerminalOutT implements fb.Packable {
  base.UlidBytesT? id;
  base.UlidBytesT? inId;
  DnsTerminalT? dnsTerminal;

  QueryDnsTerminalOutT({this.id, this.inId, this.dnsTerminal});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? dnsTerminalOffset = dnsTerminal?.pack(fbBuilder);
    fbBuilder.startTable(3);
    if (id != null) {
      fbBuilder.addStruct(0, id!.pack(fbBuilder));
    }
    if (inId != null) {
      fbBuilder.addStruct(1, inId!.pack(fbBuilder));
    }
    fbBuilder.addOffset(2, dnsTerminalOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QueryDnsTerminalOutT{id: ${id}, inId: ${inId}, dnsTerminal: ${dnsTerminal}}';
  }
}

class _QueryDnsTerminalOutReader extends fb.TableReader<QueryDnsTerminalOut> {
  const _QueryDnsTerminalOutReader();

  @override
  QueryDnsTerminalOut createObject(fb.BufferContext bc, int offset) => QueryDnsTerminalOut._(bc, offset);
}

class QueryDnsTerminalOutBuilder {
  QueryDnsTerminalOutBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addInId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addDnsTerminalOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QueryDnsTerminalOutObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final base.UlidBytesObjectBuilder? _inId;
  final DnsTerminalObjectBuilder? _dnsTerminal;

  QueryDnsTerminalOutObjectBuilder({base.UlidBytesObjectBuilder? id, base.UlidBytesObjectBuilder? inId, DnsTerminalObjectBuilder? dnsTerminal})
    : _id = id,
      _inId = inId,
      _dnsTerminal = dnsTerminal;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dnsTerminalOffset = _dnsTerminal?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_inId != null) {
      fbBuilder.addStruct(1, _inId!.finish(fbBuilder));
    }
    fbBuilder.addOffset(2, dnsTerminalOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class QueryDnsTerminalIn {
  QueryDnsTerminalIn._(this._bc, this._bcOffset);
  factory QueryDnsTerminalIn(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QueryDnsTerminalIn> reader = _QueryDnsTerminalInReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'QueryDnsTerminalIn{id: ${id}}';
  }

  QueryDnsTerminalInT unpack() => QueryDnsTerminalInT(id: id?.unpack());

  static int pack(fb.Builder fbBuilder, QueryDnsTerminalInT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QueryDnsTerminalInT implements fb.Packable {
  base.UlidBytesT? id;

  QueryDnsTerminalInT({this.id});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    if (id != null) {
      fbBuilder.addStruct(0, id!.pack(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QueryDnsTerminalInT{id: ${id}}';
  }
}

class _QueryDnsTerminalInReader extends fb.TableReader<QueryDnsTerminalIn> {
  const _QueryDnsTerminalInReader();

  @override
  QueryDnsTerminalIn createObject(fb.BufferContext bc, int offset) => QueryDnsTerminalIn._(bc, offset);
}

class QueryDnsTerminalInBuilder {
  QueryDnsTerminalInBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QueryDnsTerminalInObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;

  QueryDnsTerminalInObjectBuilder({base.UlidBytesObjectBuilder? id}) : _id = id;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class QueryPartnersOut {
  QueryPartnersOut._(this._bc, this._bcOffset);
  factory QueryPartnersOut(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QueryPartnersOut> reader = _QueryPartnersOutReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  base.UlidBytes? get inId => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<DnsTerminal>? get dnsPartners => const fb.ListReader<DnsTerminal>(DnsTerminal.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'QueryPartnersOut{id: ${id}, inId: ${inId}, dnsPartners: ${dnsPartners}}';
  }

  QueryPartnersOutT unpack() => QueryPartnersOutT(id: id?.unpack(), inId: inId?.unpack(), dnsPartners: dnsPartners?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, QueryPartnersOutT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QueryPartnersOutT implements fb.Packable {
  base.UlidBytesT? id;
  base.UlidBytesT? inId;
  List<DnsTerminalT>? dnsPartners;

  QueryPartnersOutT({this.id, this.inId, this.dnsPartners});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? dnsPartnersOffset = dnsPartners == null ? null : fbBuilder.writeList(dnsPartners!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(3);
    if (id != null) {
      fbBuilder.addStruct(0, id!.pack(fbBuilder));
    }
    if (inId != null) {
      fbBuilder.addStruct(1, inId!.pack(fbBuilder));
    }
    fbBuilder.addOffset(2, dnsPartnersOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QueryPartnersOutT{id: ${id}, inId: ${inId}, dnsPartners: ${dnsPartners}}';
  }
}

class _QueryPartnersOutReader extends fb.TableReader<QueryPartnersOut> {
  const _QueryPartnersOutReader();

  @override
  QueryPartnersOut createObject(fb.BufferContext bc, int offset) => QueryPartnersOut._(bc, offset);
}

class QueryPartnersOutBuilder {
  QueryPartnersOutBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addInId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addDnsPartnersOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QueryPartnersOutObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final base.UlidBytesObjectBuilder? _inId;
  final List<DnsTerminalObjectBuilder>? _dnsPartners;

  QueryPartnersOutObjectBuilder({base.UlidBytesObjectBuilder? id, base.UlidBytesObjectBuilder? inId, List<DnsTerminalObjectBuilder>? dnsPartners})
    : _id = id,
      _inId = inId,
      _dnsPartners = dnsPartners;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dnsPartnersOffset = _dnsPartners == null ? null : fbBuilder.writeList(_dnsPartners!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_inId != null) {
      fbBuilder.addStruct(1, _inId!.finish(fbBuilder));
    }
    fbBuilder.addOffset(2, dnsPartnersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class QueryPartnersIn {
  QueryPartnersIn._(this._bc, this._bcOffset);
  factory QueryPartnersIn(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QueryPartnersIn> reader = _QueryPartnersInReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  DnsTerminal? get terminal => DnsTerminal.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'QueryPartnersIn{id: ${id}, terminal: ${terminal}}';
  }

  QueryPartnersInT unpack() => QueryPartnersInT(id: id?.unpack(), terminal: terminal?.unpack());

  static int pack(fb.Builder fbBuilder, QueryPartnersInT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QueryPartnersInT implements fb.Packable {
  base.UlidBytesT? id;
  DnsTerminalT? terminal;

  QueryPartnersInT({this.id, this.terminal});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? terminalOffset = terminal?.pack(fbBuilder);
    fbBuilder.startTable(2);
    if (id != null) {
      fbBuilder.addStruct(0, id!.pack(fbBuilder));
    }
    fbBuilder.addOffset(1, terminalOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QueryPartnersInT{id: ${id}, terminal: ${terminal}}';
  }
}

class _QueryPartnersInReader extends fb.TableReader<QueryPartnersIn> {
  const _QueryPartnersInReader();

  @override
  QueryPartnersIn createObject(fb.BufferContext bc, int offset) => QueryPartnersIn._(bc, offset);
}

class QueryPartnersInBuilder {
  QueryPartnersInBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addTerminalOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QueryPartnersInObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final DnsTerminalObjectBuilder? _terminal;

  QueryPartnersInObjectBuilder({base.UlidBytesObjectBuilder? id, DnsTerminalObjectBuilder? terminal}) : _id = id, _terminal = terminal;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? terminalOffset = _terminal?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, terminalOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
