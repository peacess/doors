// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library partner;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './base_base_generated.dart' as base;
import './ffi_rpc_ffi_rpc_generated.dart' as ffi_rpc;

class Partner {
  Partner._(this._bc, this._bcOffset);
  factory Partner(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Partner> reader = _PartnerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<base.TerminalId>? get terminalIds => const fb.ListReader<base.TerminalId>(base.TerminalId.reader).vTableGetNullable(_bc, _bcOffset, 6);
  base.Ubyte16? get partnerId => base.Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get showName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  int get port => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 16, 0);
  base.Timestamp? get createTs => base.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'Partner{id: ${id}, terminalIds: ${terminalIds}, partnerId: ${partnerId}, name: ${name}, showName: ${showName}, ip: ${ip}, port: ${port}, createTs: ${createTs}}';
  }
}

class _PartnerReader extends fb.TableReader<Partner> {
  const _PartnerReader();

  @override
  Partner createObject(fb.BufferContext bc, int offset) => Partner._(bc, offset);
}

class PartnerBuilder {
  PartnerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addTerminalIdsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPartnerId(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addShowNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addPort(int? port) {
    fbBuilder.addInt16(6, port);
    return fbBuilder.offset;
  }

  int addCreateTs(int offset) {
    fbBuilder.addStruct(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PartnerObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final List<base.TerminalIdObjectBuilder>? _terminalIds;
  final base.Ubyte16ObjectBuilder? _partnerId;
  final String? _name;
  final String? _showName;
  final String? _ip;
  final int? _port;
  final base.TimestampObjectBuilder? _createTs;

  PartnerObjectBuilder({
    base.UlidBytesObjectBuilder? id,
    List<base.TerminalIdObjectBuilder>? terminalIds,
    base.Ubyte16ObjectBuilder? partnerId,
    String? name,
    String? showName,
    String? ip,
    int? port,
    base.TimestampObjectBuilder? createTs,
  }) : _id = id,
       _terminalIds = terminalIds,
       _partnerId = partnerId,
       _name = name,
       _showName = showName,
       _ip = ip,
       _port = port,
       _createTs = createTs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? terminalIdsOffset = _terminalIds == null ? null : fbBuilder.writeListOfStructs(_terminalIds!);
    final int? nameOffset = _name == null ? null : fbBuilder.writeString(_name!);
    final int? showNameOffset = _showName == null ? null : fbBuilder.writeString(_showName!);
    final int? ipOffset = _ip == null ? null : fbBuilder.writeString(_ip!);
    fbBuilder.startTable(8);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, terminalIdsOffset);
    if (_partnerId != null) {
      fbBuilder.addStruct(2, _partnerId!.finish(fbBuilder));
    }
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(4, showNameOffset);
    fbBuilder.addOffset(5, ipOffset);
    fbBuilder.addInt16(6, _port);
    if (_createTs != null) {
      fbBuilder.addStruct(7, _createTs!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
