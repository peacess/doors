// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library partner;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './base_base_generated.dart' as base;

class Partner {
  Partner._(this._bc, this._bcOffset);
  factory Partner(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Partner> reader = _PartnerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.Ubyte16? get id => base.Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 4);
  base.Ubyte16? get terminalId => base.Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 6);
  base.Ubyte16? get partnerId => base.Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  int get port => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 14, 0);
  base.Timestamp? get createTs => base.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'Partner{id: ${id}, terminalId: ${terminalId}, partnerId: ${partnerId}, name: ${name}, ip: ${ip}, port: ${port}, createTs: ${createTs}}';
  }
}

class _PartnerReader extends fb.TableReader<Partner> {
  const _PartnerReader();

  @override
  Partner createObject(fb.BufferContext bc, int offset) => Partner._(bc, offset);
}

class PartnerBuilder {
  PartnerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addTerminalId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addPartnerId(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addPort(int? port) {
    fbBuilder.addInt16(5, port);
    return fbBuilder.offset;
  }

  int addCreateTs(int offset) {
    fbBuilder.addStruct(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PartnerObjectBuilder extends fb.ObjectBuilder {
  final base.Ubyte16ObjectBuilder? _id;
  final base.Ubyte16ObjectBuilder? _terminalId;
  final base.Ubyte16ObjectBuilder? _partnerId;
  final String? _name;
  final String? _ip;
  final int? _port;
  final base.TimestampObjectBuilder? _createTs;

  PartnerObjectBuilder({
    base.Ubyte16ObjectBuilder? id,
    base.Ubyte16ObjectBuilder? terminalId,
    base.Ubyte16ObjectBuilder? partnerId,
    String? name,
    String? ip,
    int? port,
    base.TimestampObjectBuilder? createTs,
  }) : _id = id,
       _terminalId = terminalId,
       _partnerId = partnerId,
       _name = name,
       _ip = ip,
       _port = port,
       _createTs = createTs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null : fbBuilder.writeString(_name!);
    final int? ipOffset = _ip == null ? null : fbBuilder.writeString(_ip!);
    fbBuilder.startTable(7);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_terminalId != null) {
      fbBuilder.addStruct(1, _terminalId!.finish(fbBuilder));
    }
    if (_partnerId != null) {
      fbBuilder.addStruct(2, _partnerId!.finish(fbBuilder));
    }
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(4, ipOffset);
    fbBuilder.addInt16(5, _port);
    if (_createTs != null) {
      fbBuilder.addStruct(6, _createTs!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class OnLine {
  OnLine._(this._bc, this._bcOffset);
  factory OnLine(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnLine> reader = _OnLineReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.Header? get header => base.Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  Partner? get partner => Partner.reader.vTableGetNullable(_bc, _bcOffset, 6);
  base.Timestamp? get ts => base.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'OnLine{header: ${header}, partner: ${partner}, ts: ${ts}}';
  }
}

class _OnLineReader extends fb.TableReader<OnLine> {
  const _OnLineReader();

  @override
  OnLine createObject(fb.BufferContext bc, int offset) => OnLine._(bc, offset);
}

class OnLineBuilder {
  OnLineBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addPartnerOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addTs(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnLineObjectBuilder extends fb.ObjectBuilder {
  final base.HeaderObjectBuilder? _header;
  final PartnerObjectBuilder? _partner;
  final base.TimestampObjectBuilder? _ts;

  OnLineObjectBuilder({base.HeaderObjectBuilder? header, PartnerObjectBuilder? partner, base.TimestampObjectBuilder? ts})
    : _header = header,
      _partner = partner,
      _ts = ts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? partnerOffset = _partner?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, partnerOffset);
    if (_ts != null) {
      fbBuilder.addStruct(2, _ts!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class OnLineAck {
  OnLineAck._(this._bc, this._bcOffset);
  factory OnLineAck(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnLineAck> reader = _OnLineAckReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.Header? get header => base.Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  base.Ubyte16? get id => base.Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 6);
  Partner? get partner => Partner.reader.vTableGetNullable(_bc, _bcOffset, 8);
  base.Timestamp? get ts => base.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'OnLineAck{header: ${header}, id: ${id}, partner: ${partner}, ts: ${ts}}';
  }
}

class _OnLineAckReader extends fb.TableReader<OnLineAck> {
  const _OnLineAckReader();

  @override
  OnLineAck createObject(fb.BufferContext bc, int offset) => OnLineAck._(bc, offset);
}

class OnLineAckBuilder {
  OnLineAckBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addPartnerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addTs(int offset) {
    fbBuilder.addStruct(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnLineAckObjectBuilder extends fb.ObjectBuilder {
  final base.HeaderObjectBuilder? _header;
  final base.Ubyte16ObjectBuilder? _id;
  final PartnerObjectBuilder? _partner;
  final base.TimestampObjectBuilder? _ts;

  OnLineAckObjectBuilder({base.HeaderObjectBuilder? header, base.Ubyte16ObjectBuilder? id, PartnerObjectBuilder? partner, base.TimestampObjectBuilder? ts})
    : _header = header,
      _id = id,
      _partner = partner,
      _ts = ts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? partnerOffset = _partner?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    if (_id != null) {
      fbBuilder.addStruct(1, _id!.finish(fbBuilder));
    }
    fbBuilder.addOffset(2, partnerOffset);
    if (_ts != null) {
      fbBuilder.addStruct(3, _ts!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
