// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library ffi_rpc;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class FfiRpcFrame {
  FfiRpcFrame._(this._bc, this._bcOffset);
  factory FfiRpcFrame(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FfiRpcFrame> reader = _FfiRpcFrameReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  FfiRpcHeader? get header => FfiRpcHeader.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get bytes => const fb.Int8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FfiRpcFrame{header: ${header}, bytes: ${bytes}}';
  }
}

class _FfiRpcFrameReader extends fb.TableReader<FfiRpcFrame> {
  const _FfiRpcFrameReader();

  @override
  FfiRpcFrame createObject(fb.BufferContext bc, int offset) => FfiRpcFrame._(bc, offset);
}

class FfiRpcFrameBuilder {
  FfiRpcFrameBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addBytesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FfiRpcFrameObjectBuilder extends fb.ObjectBuilder {
  final FfiRpcHeaderObjectBuilder? _header;
  final List<int>? _bytes;

  FfiRpcFrameObjectBuilder({FfiRpcHeaderObjectBuilder? header, List<int>? bytes}) : _header = header, _bytes = bytes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? bytesOffset = _bytes == null ? null : fbBuilder.writeListInt8(_bytes!);
    fbBuilder.startTable(2);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, bytesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class FfiRpcHeader {
  FfiRpcHeader._(this._bc, this._bcOffset);

  static const fb.Reader<FfiRpcHeader> reader = _FfiRpcHeaderReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get len => const fb.Uint64Reader().read(_bc, _bcOffset + 0);
  int get rpcType => const fb.Uint32Reader().read(_bc, _bcOffset + 8);
  int get version => const fb.Uint16Reader().read(_bc, _bcOffset + 12);

  @override
  String toString() {
    return 'FfiRpcHeader{len: ${len}, rpcType: ${rpcType}, version: ${version}}';
  }
}

class _FfiRpcHeaderReader extends fb.StructReader<FfiRpcHeader> {
  const _FfiRpcHeaderReader();

  @override
  int get size => 16;

  @override
  FfiRpcHeader createObject(fb.BufferContext bc, int offset) => FfiRpcHeader._(bc, offset);
}

class FfiRpcHeaderBuilder {
  FfiRpcHeaderBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int len, int rpcType, int version) {
    fbBuilder.pad(2);
    fbBuilder.putUint16(version);
    fbBuilder.putUint32(rpcType);
    fbBuilder.putUint64(len);
    return fbBuilder.offset;
  }
}

class FfiRpcHeaderObjectBuilder extends fb.ObjectBuilder {
  final int _len;
  final int _rpcType;
  final int _version;

  FfiRpcHeaderObjectBuilder({required int len, required int rpcType, required int version}) : _len = len, _rpcType = rpcType, _version = version;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.pad(2);
    fbBuilder.putUint16(_version);
    fbBuilder.putUint32(_rpcType);
    fbBuilder.putUint64(_len);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
