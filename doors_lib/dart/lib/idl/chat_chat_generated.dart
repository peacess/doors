// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library chat;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './base_base_generated.dart' as base;
import './ffi_rpc_ffi_rpc_generated.dart' as ffi_rpc;

class TextMessage {
  TextMessage._(this._bc, this._bcOffset);
  factory TextMessage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TextMessage> reader = _TextMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  base.PartnerId? get fromPartnerId => base.PartnerId.reader.vTableGetNullable(_bc, _bcOffset, 6);
  base.PartnerId? get toPartnerId => base.PartnerId.reader.vTableGetNullable(_bc, _bcOffset, 8);
  base.TerminalId? get fromTerminalId => base.TerminalId.reader.vTableGetNullable(_bc, _bcOffset, 10);
  base.TerminalId? get toTerminalId => base.TerminalId.reader.vTableGetNullable(_bc, _bcOffset, 12);
  base.Timestamp? get ts => base.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 14);
  String? get text => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'TextMessage{id: ${id}, fromPartnerId: ${fromPartnerId}, toPartnerId: ${toPartnerId}, fromTerminalId: ${fromTerminalId}, toTerminalId: ${toTerminalId}, ts: ${ts}, text: ${text}}';
  }
}

class _TextMessageReader extends fb.TableReader<TextMessage> {
  const _TextMessageReader();

  @override
  TextMessage createObject(fb.BufferContext bc, int offset) => TextMessage._(bc, offset);
}

class TextMessageBuilder {
  TextMessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addFromPartnerId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addToPartnerId(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int addFromTerminalId(int offset) {
    fbBuilder.addStruct(3, offset);
    return fbBuilder.offset;
  }

  int addToTerminalId(int offset) {
    fbBuilder.addStruct(4, offset);
    return fbBuilder.offset;
  }

  int addTs(int offset) {
    fbBuilder.addStruct(5, offset);
    return fbBuilder.offset;
  }

  int addTextOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TextMessageObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final base.PartnerIdObjectBuilder? _fromPartnerId;
  final base.PartnerIdObjectBuilder? _toPartnerId;
  final base.TerminalIdObjectBuilder? _fromTerminalId;
  final base.TerminalIdObjectBuilder? _toTerminalId;
  final base.TimestampObjectBuilder? _ts;
  final String? _text;

  TextMessageObjectBuilder({
    base.UlidBytesObjectBuilder? id,
    base.PartnerIdObjectBuilder? fromPartnerId,
    base.PartnerIdObjectBuilder? toPartnerId,
    base.TerminalIdObjectBuilder? fromTerminalId,
    base.TerminalIdObjectBuilder? toTerminalId,
    base.TimestampObjectBuilder? ts,
    String? text,
  }) : _id = id,
       _fromPartnerId = fromPartnerId,
       _toPartnerId = toPartnerId,
       _fromTerminalId = fromTerminalId,
       _toTerminalId = toTerminalId,
       _ts = ts,
       _text = text;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? textOffset = _text == null ? null : fbBuilder.writeString(_text!);
    fbBuilder.startTable(7);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_fromPartnerId != null) {
      fbBuilder.addStruct(1, _fromPartnerId!.finish(fbBuilder));
    }
    if (_toPartnerId != null) {
      fbBuilder.addStruct(2, _toPartnerId!.finish(fbBuilder));
    }
    if (_fromTerminalId != null) {
      fbBuilder.addStruct(3, _fromTerminalId!.finish(fbBuilder));
    }
    if (_toTerminalId != null) {
      fbBuilder.addStruct(4, _toTerminalId!.finish(fbBuilder));
    }
    if (_ts != null) {
      fbBuilder.addStruct(5, _ts!.finish(fbBuilder));
    }
    fbBuilder.addOffset(6, textOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class TextMessageAck {
  TextMessageAck._(this._bc, this._bcOffset);
  factory TextMessageAck(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TextMessageAck> reader = _TextMessageAckReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.UlidBytes? get id => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  base.UlidBytes? get sendId => base.UlidBytes.reader.vTableGetNullable(_bc, _bcOffset, 6);
  base.Timestamp? get ts => base.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'TextMessageAck{id: ${id}, sendId: ${sendId}, ts: ${ts}}';
  }
}

class _TextMessageAckReader extends fb.TableReader<TextMessageAck> {
  const _TextMessageAckReader();

  @override
  TextMessageAck createObject(fb.BufferContext bc, int offset) => TextMessageAck._(bc, offset);
}

class TextMessageAckBuilder {
  TextMessageAckBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addSendId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addTs(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TextMessageAckObjectBuilder extends fb.ObjectBuilder {
  final base.UlidBytesObjectBuilder? _id;
  final base.UlidBytesObjectBuilder? _sendId;
  final base.TimestampObjectBuilder? _ts;

  TextMessageAckObjectBuilder({base.UlidBytesObjectBuilder? id, base.UlidBytesObjectBuilder? sendId, base.TimestampObjectBuilder? ts})
    : _id = id,
      _sendId = sendId,
      _ts = ts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_sendId != null) {
      fbBuilder.addStruct(1, _sendId!.finish(fbBuilder));
    }
    if (_ts != null) {
      fbBuilder.addStruct(2, _ts!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
