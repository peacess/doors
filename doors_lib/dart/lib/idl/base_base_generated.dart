// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library base;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

enum FrameType {
  Message(0),
  MessageAck(1),
  OnLine(100),
  OnLineAck(101);

  final int value;
  const FrameType(this.value);

  factory FrameType.fromValue(int value) {
    switch (value) {
      case 0:
        return FrameType.Message;
      case 1:
        return FrameType.MessageAck;
      case 100:
        return FrameType.OnLine;
      case 101:
        return FrameType.OnLineAck;
      default:
        throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static FrameType? _createOrNull(int? value) => value == null ? null : FrameType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 101;
  static const fb.Reader<FrameType> reader = _FrameTypeReader();
}

class _FrameTypeReader extends fb.Reader<FrameType> {
  const _FrameTypeReader();

  @override
  int get size => 2;

  @override
  FrameType read(fb.BufferContext bc, int offset) => FrameType.fromValue(const fb.Int16Reader().read(bc, offset));
}

class Ubyte8 {
  Ubyte8._(this._bc, this._bcOffset);

  static const fb.Reader<Ubyte8> reader = _Ubyte8Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get ub1 => const fb.Uint8Reader().read(_bc, _bcOffset + 0);
  int get ub2 => const fb.Uint8Reader().read(_bc, _bcOffset + 1);
  int get ub3 => const fb.Uint8Reader().read(_bc, _bcOffset + 2);
  int get ub4 => const fb.Uint8Reader().read(_bc, _bcOffset + 3);
  int get ub5 => const fb.Uint8Reader().read(_bc, _bcOffset + 4);
  int get ub6 => const fb.Uint8Reader().read(_bc, _bcOffset + 5);
  int get ub7 => const fb.Uint8Reader().read(_bc, _bcOffset + 6);
  int get ub8 => const fb.Uint8Reader().read(_bc, _bcOffset + 7);

  @override
  String toString() {
    return 'Ubyte8{ub1: ${ub1}, ub2: ${ub2}, ub3: ${ub3}, ub4: ${ub4}, ub5: ${ub5}, ub6: ${ub6}, ub7: ${ub7}, ub8: ${ub8}}';
  }
}

class _Ubyte8Reader extends fb.StructReader<Ubyte8> {
  const _Ubyte8Reader();

  @override
  int get size => 8;

  @override
  Ubyte8 createObject(fb.BufferContext bc, int offset) => Ubyte8._(bc, offset);
}

class Ubyte8Builder {
  Ubyte8Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int ub1, int ub2, int ub3, int ub4, int ub5, int ub6, int ub7, int ub8) {
    fbBuilder.putUint8(ub8);
    fbBuilder.putUint8(ub7);
    fbBuilder.putUint8(ub6);
    fbBuilder.putUint8(ub5);
    fbBuilder.putUint8(ub4);
    fbBuilder.putUint8(ub3);
    fbBuilder.putUint8(ub2);
    fbBuilder.putUint8(ub1);
    return fbBuilder.offset;
  }
}

class Ubyte8ObjectBuilder extends fb.ObjectBuilder {
  final int _ub1;
  final int _ub2;
  final int _ub3;
  final int _ub4;
  final int _ub5;
  final int _ub6;
  final int _ub7;
  final int _ub8;

  Ubyte8ObjectBuilder({
    required int ub1,
    required int ub2,
    required int ub3,
    required int ub4,
    required int ub5,
    required int ub6,
    required int ub7,
    required int ub8,
  }) : _ub1 = ub1,
       _ub2 = ub2,
       _ub3 = ub3,
       _ub4 = ub4,
       _ub5 = ub5,
       _ub6 = ub6,
       _ub7 = ub7,
       _ub8 = ub8;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint8(_ub8);
    fbBuilder.putUint8(_ub7);
    fbBuilder.putUint8(_ub6);
    fbBuilder.putUint8(_ub5);
    fbBuilder.putUint8(_ub4);
    fbBuilder.putUint8(_ub3);
    fbBuilder.putUint8(_ub2);
    fbBuilder.putUint8(_ub1);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Ubyte16 {
  Ubyte16._(this._bc, this._bcOffset);

  static const fb.Reader<Ubyte16> reader = _Ubyte16Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get ub1 => const fb.Uint8Reader().read(_bc, _bcOffset + 0);
  int get ub2 => const fb.Uint8Reader().read(_bc, _bcOffset + 1);
  int get ub3 => const fb.Uint8Reader().read(_bc, _bcOffset + 2);
  int get ub4 => const fb.Uint8Reader().read(_bc, _bcOffset + 3);
  int get ub5 => const fb.Uint8Reader().read(_bc, _bcOffset + 4);
  int get ub6 => const fb.Uint8Reader().read(_bc, _bcOffset + 5);
  int get ub7 => const fb.Uint8Reader().read(_bc, _bcOffset + 6);
  int get ub8 => const fb.Uint8Reader().read(_bc, _bcOffset + 7);
  int get ub9 => const fb.Uint8Reader().read(_bc, _bcOffset + 8);
  int get ub10 => const fb.Uint8Reader().read(_bc, _bcOffset + 9);
  int get ub11 => const fb.Uint8Reader().read(_bc, _bcOffset + 10);
  int get ub12 => const fb.Uint8Reader().read(_bc, _bcOffset + 11);
  int get ub13 => const fb.Uint8Reader().read(_bc, _bcOffset + 12);
  int get ub14 => const fb.Uint8Reader().read(_bc, _bcOffset + 13);
  int get ub15 => const fb.Uint8Reader().read(_bc, _bcOffset + 14);
  int get ub16 => const fb.Uint8Reader().read(_bc, _bcOffset + 15);

  @override
  String toString() {
    return 'Ubyte16{ub1: ${ub1}, ub2: ${ub2}, ub3: ${ub3}, ub4: ${ub4}, ub5: ${ub5}, ub6: ${ub6}, ub7: ${ub7}, ub8: ${ub8}, ub9: ${ub9}, ub10: ${ub10}, ub11: ${ub11}, ub12: ${ub12}, ub13: ${ub13}, ub14: ${ub14}, ub15: ${ub15}, ub16: ${ub16}}';
  }
}

class _Ubyte16Reader extends fb.StructReader<Ubyte16> {
  const _Ubyte16Reader();

  @override
  int get size => 16;

  @override
  Ubyte16 createObject(fb.BufferContext bc, int offset) => Ubyte16._(bc, offset);
}

class Ubyte16Builder {
  Ubyte16Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(
    int ub1,
    int ub2,
    int ub3,
    int ub4,
    int ub5,
    int ub6,
    int ub7,
    int ub8,
    int ub9,
    int ub10,
    int ub11,
    int ub12,
    int ub13,
    int ub14,
    int ub15,
    int ub16,
  ) {
    fbBuilder.putUint8(ub16);
    fbBuilder.putUint8(ub15);
    fbBuilder.putUint8(ub14);
    fbBuilder.putUint8(ub13);
    fbBuilder.putUint8(ub12);
    fbBuilder.putUint8(ub11);
    fbBuilder.putUint8(ub10);
    fbBuilder.putUint8(ub9);
    fbBuilder.putUint8(ub8);
    fbBuilder.putUint8(ub7);
    fbBuilder.putUint8(ub6);
    fbBuilder.putUint8(ub5);
    fbBuilder.putUint8(ub4);
    fbBuilder.putUint8(ub3);
    fbBuilder.putUint8(ub2);
    fbBuilder.putUint8(ub1);
    return fbBuilder.offset;
  }
}

class Ubyte16ObjectBuilder extends fb.ObjectBuilder {
  final int _ub1;
  final int _ub2;
  final int _ub3;
  final int _ub4;
  final int _ub5;
  final int _ub6;
  final int _ub7;
  final int _ub8;
  final int _ub9;
  final int _ub10;
  final int _ub11;
  final int _ub12;
  final int _ub13;
  final int _ub14;
  final int _ub15;
  final int _ub16;

  Ubyte16ObjectBuilder({
    required int ub1,
    required int ub2,
    required int ub3,
    required int ub4,
    required int ub5,
    required int ub6,
    required int ub7,
    required int ub8,
    required int ub9,
    required int ub10,
    required int ub11,
    required int ub12,
    required int ub13,
    required int ub14,
    required int ub15,
    required int ub16,
  }) : _ub1 = ub1,
       _ub2 = ub2,
       _ub3 = ub3,
       _ub4 = ub4,
       _ub5 = ub5,
       _ub6 = ub6,
       _ub7 = ub7,
       _ub8 = ub8,
       _ub9 = ub9,
       _ub10 = ub10,
       _ub11 = ub11,
       _ub12 = ub12,
       _ub13 = ub13,
       _ub14 = ub14,
       _ub15 = ub15,
       _ub16 = ub16;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint8(_ub16);
    fbBuilder.putUint8(_ub15);
    fbBuilder.putUint8(_ub14);
    fbBuilder.putUint8(_ub13);
    fbBuilder.putUint8(_ub12);
    fbBuilder.putUint8(_ub11);
    fbBuilder.putUint8(_ub10);
    fbBuilder.putUint8(_ub9);
    fbBuilder.putUint8(_ub8);
    fbBuilder.putUint8(_ub7);
    fbBuilder.putUint8(_ub6);
    fbBuilder.putUint8(_ub5);
    fbBuilder.putUint8(_ub4);
    fbBuilder.putUint8(_ub3);
    fbBuilder.putUint8(_ub2);
    fbBuilder.putUint8(_ub1);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class UlidBytes {
  UlidBytes._(this._bc, this._bcOffset);

  static const fb.Reader<UlidBytes> reader = _UlidBytesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get ts1 => const fb.Uint8Reader().read(_bc, _bcOffset + 0);
  int get ts2 => const fb.Uint8Reader().read(_bc, _bcOffset + 1);
  int get ts3 => const fb.Uint8Reader().read(_bc, _bcOffset + 2);
  int get ts4 => const fb.Uint8Reader().read(_bc, _bcOffset + 3);
  int get ts5 => const fb.Uint8Reader().read(_bc, _bcOffset + 4);
  int get ts6 => const fb.Uint8Reader().read(_bc, _bcOffset + 5);
  int get rand7 => const fb.Uint8Reader().read(_bc, _bcOffset + 6);
  int get rand8 => const fb.Uint8Reader().read(_bc, _bcOffset + 7);
  int get rand9 => const fb.Uint8Reader().read(_bc, _bcOffset + 8);
  int get rand10 => const fb.Uint8Reader().read(_bc, _bcOffset + 9);
  int get rand11 => const fb.Uint8Reader().read(_bc, _bcOffset + 10);
  int get rand12 => const fb.Uint8Reader().read(_bc, _bcOffset + 11);
  int get rand13 => const fb.Uint8Reader().read(_bc, _bcOffset + 12);
  int get rand14 => const fb.Uint8Reader().read(_bc, _bcOffset + 13);
  int get rand15 => const fb.Uint8Reader().read(_bc, _bcOffset + 14);
  int get rand16 => const fb.Uint8Reader().read(_bc, _bcOffset + 15);

  @override
  String toString() {
    return 'UlidBytes{ts1: ${ts1}, ts2: ${ts2}, ts3: ${ts3}, ts4: ${ts4}, ts5: ${ts5}, ts6: ${ts6}, rand7: ${rand7}, rand8: ${rand8}, rand9: ${rand9}, rand10: ${rand10}, rand11: ${rand11}, rand12: ${rand12}, rand13: ${rand13}, rand14: ${rand14}, rand15: ${rand15}, rand16: ${rand16}}';
  }
}

class _UlidBytesReader extends fb.StructReader<UlidBytes> {
  const _UlidBytesReader();

  @override
  int get size => 16;

  @override
  UlidBytes createObject(fb.BufferContext bc, int offset) => UlidBytes._(bc, offset);
}

class UlidBytesBuilder {
  UlidBytesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(
    int ts1,
    int ts2,
    int ts3,
    int ts4,
    int ts5,
    int ts6,
    int rand7,
    int rand8,
    int rand9,
    int rand10,
    int rand11,
    int rand12,
    int rand13,
    int rand14,
    int rand15,
    int rand16,
  ) {
    fbBuilder.putUint8(rand16);
    fbBuilder.putUint8(rand15);
    fbBuilder.putUint8(rand14);
    fbBuilder.putUint8(rand13);
    fbBuilder.putUint8(rand12);
    fbBuilder.putUint8(rand11);
    fbBuilder.putUint8(rand10);
    fbBuilder.putUint8(rand9);
    fbBuilder.putUint8(rand8);
    fbBuilder.putUint8(rand7);
    fbBuilder.putUint8(ts6);
    fbBuilder.putUint8(ts5);
    fbBuilder.putUint8(ts4);
    fbBuilder.putUint8(ts3);
    fbBuilder.putUint8(ts2);
    fbBuilder.putUint8(ts1);
    return fbBuilder.offset;
  }
}

class UlidBytesObjectBuilder extends fb.ObjectBuilder {
  final int _ts1;
  final int _ts2;
  final int _ts3;
  final int _ts4;
  final int _ts5;
  final int _ts6;
  final int _rand7;
  final int _rand8;
  final int _rand9;
  final int _rand10;
  final int _rand11;
  final int _rand12;
  final int _rand13;
  final int _rand14;
  final int _rand15;
  final int _rand16;

  UlidBytesObjectBuilder({
    required int ts1,
    required int ts2,
    required int ts3,
    required int ts4,
    required int ts5,
    required int ts6,
    required int rand7,
    required int rand8,
    required int rand9,
    required int rand10,
    required int rand11,
    required int rand12,
    required int rand13,
    required int rand14,
    required int rand15,
    required int rand16,
  }) : _ts1 = ts1,
       _ts2 = ts2,
       _ts3 = ts3,
       _ts4 = ts4,
       _ts5 = ts5,
       _ts6 = ts6,
       _rand7 = rand7,
       _rand8 = rand8,
       _rand9 = rand9,
       _rand10 = rand10,
       _rand11 = rand11,
       _rand12 = rand12,
       _rand13 = rand13,
       _rand14 = rand14,
       _rand15 = rand15,
       _rand16 = rand16;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint8(_rand16);
    fbBuilder.putUint8(_rand15);
    fbBuilder.putUint8(_rand14);
    fbBuilder.putUint8(_rand13);
    fbBuilder.putUint8(_rand12);
    fbBuilder.putUint8(_rand11);
    fbBuilder.putUint8(_rand10);
    fbBuilder.putUint8(_rand9);
    fbBuilder.putUint8(_rand8);
    fbBuilder.putUint8(_rand7);
    fbBuilder.putUint8(_ts6);
    fbBuilder.putUint8(_ts5);
    fbBuilder.putUint8(_ts4);
    fbBuilder.putUint8(_ts3);
    fbBuilder.putUint8(_ts2);
    fbBuilder.putUint8(_ts1);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Uint128 {
  Uint128._(this._bc, this._bcOffset);

  static const fb.Reader<Uint128> reader = _Uint128Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get low => const fb.Uint64Reader().read(_bc, _bcOffset + 0);
  int get high => const fb.Uint64Reader().read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'Uint128{low: ${low}, high: ${high}}';
  }
}

class _Uint128Reader extends fb.StructReader<Uint128> {
  const _Uint128Reader();

  @override
  int get size => 16;

  @override
  Uint128 createObject(fb.BufferContext bc, int offset) => Uint128._(bc, offset);
}

class Uint128Builder {
  Uint128Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int low, int high) {
    fbBuilder.putUint64(high);
    fbBuilder.putUint64(low);
    return fbBuilder.offset;
  }
}

class Uint128ObjectBuilder extends fb.ObjectBuilder {
  final int _low;
  final int _high;

  Uint128ObjectBuilder({required int low, required int high}) : _low = low, _high = high;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint64(_high);
    fbBuilder.putUint64(_low);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PartnerId {
  PartnerId._(this._bc, this._bcOffset);

  static const fb.Reader<PartnerId> reader = _PartnerIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get low => const fb.Uint64Reader().read(_bc, _bcOffset + 0);
  int get high => const fb.Uint64Reader().read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'PartnerId{low: ${low}, high: ${high}}';
  }
}

class _PartnerIdReader extends fb.StructReader<PartnerId> {
  const _PartnerIdReader();

  @override
  int get size => 16;

  @override
  PartnerId createObject(fb.BufferContext bc, int offset) => PartnerId._(bc, offset);
}

class PartnerIdBuilder {
  PartnerIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int low, int high) {
    fbBuilder.putUint64(high);
    fbBuilder.putUint64(low);
    return fbBuilder.offset;
  }
}

class PartnerIdObjectBuilder extends fb.ObjectBuilder {
  final int _low;
  final int _high;

  PartnerIdObjectBuilder({required int low, required int high}) : _low = low, _high = high;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint64(_high);
    fbBuilder.putUint64(_low);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class TerminalId {
  TerminalId._(this._bc, this._bcOffset);

  static const fb.Reader<TerminalId> reader = _TerminalIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get low => const fb.Uint64Reader().read(_bc, _bcOffset + 0);
  int get high => const fb.Uint64Reader().read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'TerminalId{low: ${low}, high: ${high}}';
  }
}

class _TerminalIdReader extends fb.StructReader<TerminalId> {
  const _TerminalIdReader();

  @override
  int get size => 16;

  @override
  TerminalId createObject(fb.BufferContext bc, int offset) => TerminalId._(bc, offset);
}

class TerminalIdBuilder {
  TerminalIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int low, int high) {
    fbBuilder.putUint64(high);
    fbBuilder.putUint64(low);
    return fbBuilder.offset;
  }
}

class TerminalIdObjectBuilder extends fb.ObjectBuilder {
  final int _low;
  final int _high;

  TerminalIdObjectBuilder({required int low, required int high}) : _low = low, _high = high;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint64(_high);
    fbBuilder.putUint64(_low);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Timestamp {
  Timestamp._(this._bc, this._bcOffset);

  static const fb.Reader<Timestamp> reader = _TimestampReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get ts => const fb.Int64Reader().read(_bc, _bcOffset + 0);

  @override
  String toString() {
    return 'Timestamp{ts: ${ts}}';
  }
}

class _TimestampReader extends fb.StructReader<Timestamp> {
  const _TimestampReader();

  @override
  int get size => 8;

  @override
  Timestamp createObject(fb.BufferContext bc, int offset) => Timestamp._(bc, offset);
}

class TimestampBuilder {
  TimestampBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int ts) {
    fbBuilder.putInt64(ts);
    return fbBuilder.offset;
  }
}

class TimestampObjectBuilder extends fb.ObjectBuilder {
  final int _ts;

  TimestampObjectBuilder({required int ts}) : _ts = ts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putInt64(_ts);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Frame {
  Frame._(this._bc, this._bcOffset);
  factory Frame(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Frame> reader = _FrameReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Header? get header => Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get bytes => const fb.Int8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Frame{header: ${header}, bytes: ${bytes}}';
  }
}

class _FrameReader extends fb.TableReader<Frame> {
  const _FrameReader();

  @override
  Frame createObject(fb.BufferContext bc, int offset) => Frame._(bc, offset);
}

class FrameBuilder {
  FrameBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addBytesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FrameObjectBuilder extends fb.ObjectBuilder {
  final HeaderObjectBuilder? _header;
  final List<int>? _bytes;

  FrameObjectBuilder({HeaderObjectBuilder? header, List<int>? bytes}) : _header = header, _bytes = bytes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? bytesOffset = _bytes == null ? null : fbBuilder.writeListInt8(_bytes!);
    fbBuilder.startTable(2);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, bytesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Header {
  Header._(this._bc, this._bcOffset);

  static const fb.Reader<Header> reader = _HeaderReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get len => const fb.Int32Reader().read(_bc, _bcOffset + 0);
  FrameType get type => FrameType.fromValue(const fb.Int16Reader().read(_bc, _bcOffset + 4));
  int get version => const fb.Int16Reader().read(_bc, _bcOffset + 6);
  Ubyte16 get fromId => Ubyte16.reader.read(_bc, _bcOffset + 8);
  Ubyte16 get toId => Ubyte16.reader.read(_bc, _bcOffset + 24);
  Ubyte16 get forwardId => Ubyte16.reader.read(_bc, _bcOffset + 40);

  @override
  String toString() {
    return 'Header{len: ${len}, type: ${type}, version: ${version}, fromId: ${fromId}, toId: ${toId}, forwardId: ${forwardId}}';
  }
}

class _HeaderReader extends fb.StructReader<Header> {
  const _HeaderReader();

  @override
  int get size => 56;

  @override
  Header createObject(fb.BufferContext bc, int offset) => Header._(bc, offset);
}

class HeaderBuilder {
  HeaderBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int len, FrameType type, int version, fb.StructBuilder fromId, fb.StructBuilder toId, fb.StructBuilder forwardId) {
    forwardId();
    toId();
    fromId();
    fbBuilder.putInt16(version);
    fbBuilder.putInt16(type.value);
    fbBuilder.putInt32(len);
    return fbBuilder.offset;
  }
}

class HeaderObjectBuilder extends fb.ObjectBuilder {
  final int _len;
  final FrameType _type;
  final int _version;
  final Ubyte16ObjectBuilder _fromId;
  final Ubyte16ObjectBuilder _toId;
  final Ubyte16ObjectBuilder _forwardId;

  HeaderObjectBuilder({
    required int len,
    required FrameType type,
    required int version,
    required Ubyte16ObjectBuilder fromId,
    required Ubyte16ObjectBuilder toId,
    required Ubyte16ObjectBuilder forwardId,
  }) : _len = len,
       _type = type,
       _version = version,
       _fromId = fromId,
       _toId = toId,
       _forwardId = forwardId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    _forwardId.finish(fbBuilder);
    _toId.finish(fbBuilder);
    _fromId.finish(fbBuilder);
    fbBuilder.putInt16(_version);
    fbBuilder.putInt16(_type.value);
    fbBuilder.putInt32(_len);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class MessageBody {
  MessageBody._(this._bc, this._bcOffset);
  factory MessageBody(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageBody> reader = _MessageBodyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Ubyte16? get id => Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 4);
  Ubyte16? get fromId => Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 6);
  Timestamp? get ts => Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get text => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'MessageBody{id: ${id}, fromId: ${fromId}, ts: ${ts}, text: ${text}}';
  }
}

class _MessageBodyReader extends fb.TableReader<MessageBody> {
  const _MessageBodyReader();

  @override
  MessageBody createObject(fb.BufferContext bc, int offset) => MessageBody._(bc, offset);
}

class MessageBodyBuilder {
  MessageBodyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addFromId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addTs(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int addTextOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageBodyObjectBuilder extends fb.ObjectBuilder {
  final Ubyte16ObjectBuilder? _id;
  final Ubyte16ObjectBuilder? _fromId;
  final TimestampObjectBuilder? _ts;
  final String? _text;

  MessageBodyObjectBuilder({Ubyte16ObjectBuilder? id, Ubyte16ObjectBuilder? fromId, TimestampObjectBuilder? ts, String? text})
    : _id = id,
      _fromId = fromId,
      _ts = ts,
      _text = text;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? textOffset = _text == null ? null : fbBuilder.writeString(_text!);
    fbBuilder.startTable(4);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_fromId != null) {
      fbBuilder.addStruct(1, _fromId!.finish(fbBuilder));
    }
    if (_ts != null) {
      fbBuilder.addStruct(2, _ts!.finish(fbBuilder));
    }
    fbBuilder.addOffset(3, textOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Message {
  Message._(this._bc, this._bcOffset);
  factory Message(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Message> reader = _MessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Header? get header => Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  MessageBody? get body => MessageBody.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Message{header: ${header}, body: ${body}}';
  }
}

class _MessageReader extends fb.TableReader<Message> {
  const _MessageReader();

  @override
  Message createObject(fb.BufferContext bc, int offset) => Message._(bc, offset);
}

class MessageBuilder {
  MessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageObjectBuilder extends fb.ObjectBuilder {
  final HeaderObjectBuilder? _header;
  final MessageBodyObjectBuilder? _body;

  MessageObjectBuilder({HeaderObjectBuilder? header, MessageBodyObjectBuilder? body}) : _header = header, _body = body;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? bodyOffset = _body?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, bodyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class MessageAck {
  MessageAck._(this._bc, this._bcOffset);
  factory MessageAck(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageAck> reader = _MessageAckReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Header? get header => Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  Ubyte16? get id => Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 6);
  Timestamp? get ts => Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'MessageAck{header: ${header}, id: ${id}, ts: ${ts}}';
  }
}

class _MessageAckReader extends fb.TableReader<MessageAck> {
  const _MessageAckReader();

  @override
  MessageAck createObject(fb.BufferContext bc, int offset) => MessageAck._(bc, offset);
}

class MessageAckBuilder {
  MessageAckBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addTs(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageAckObjectBuilder extends fb.ObjectBuilder {
  final HeaderObjectBuilder? _header;
  final Ubyte16ObjectBuilder? _id;
  final TimestampObjectBuilder? _ts;

  MessageAckObjectBuilder({HeaderObjectBuilder? header, Ubyte16ObjectBuilder? id, TimestampObjectBuilder? ts}) : _header = header, _id = id, _ts = ts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    if (_id != null) {
      fbBuilder.addStruct(1, _id!.finish(fbBuilder));
    }
    if (_ts != null) {
      fbBuilder.addStruct(2, _ts!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
