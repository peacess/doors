// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library net_discovery;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './base_base_generated.dart' as base;

class Regestry {
  Regestry._(this._bc, this._bcOffset);
  factory Regestry(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Regestry> reader = _RegestryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  base.PartnerId? get parterId => base.PartnerId.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Regestry{parterId: ${parterId}}';
  }
}

class _RegestryReader extends fb.TableReader<Regestry> {
  const _RegestryReader();

  @override
  Regestry createObject(fb.BufferContext bc, int offset) => Regestry._(bc, offset);
}

class RegestryBuilder {
  RegestryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addParterId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RegestryObjectBuilder extends fb.ObjectBuilder {
  final base.PartnerIdObjectBuilder? _parterId;

  RegestryObjectBuilder({base.PartnerIdObjectBuilder? parterId}) : _parterId = parterId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    if (_parterId != null) {
      fbBuilder.addStruct(0, _parterId!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
