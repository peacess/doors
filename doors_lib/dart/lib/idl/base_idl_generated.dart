// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library idl;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


enum FrameType {
  Message(0),
  MessageAck(1),
  OnLine(100),
  OnLineAck(101);

  final int value;
  const FrameType(this.value);

  factory FrameType.fromValue(int value) {
    switch (value) {
      case 0: return FrameType.Message;
      case 1: return FrameType.MessageAck;
      case 100: return FrameType.OnLine;
      case 101: return FrameType.OnLineAck;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static FrameType? _createOrNull(int? value) =>
      value == null ? null : FrameType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 101;
  static const fb.Reader<FrameType> reader = _FrameTypeReader();
}

class _FrameTypeReader extends fb.Reader<FrameType> {
  const _FrameTypeReader();

  @override
  int get size => 2;

  @override
  FrameType read(fb.BufferContext bc, int offset) =>
      FrameType.fromValue(const fb.Int16Reader().read(bc, offset));
}

class Ubyte8 {
  Ubyte8._(this._bc, this._bcOffset);

  static const fb.Reader<Ubyte8> reader = _Ubyte8Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get ub1 => const fb.Uint8Reader().read(_bc, _bcOffset + 0);
  int get ub2 => const fb.Uint8Reader().read(_bc, _bcOffset + 1);
  int get ub3 => const fb.Uint8Reader().read(_bc, _bcOffset + 2);
  int get ub4 => const fb.Uint8Reader().read(_bc, _bcOffset + 3);
  int get ub5 => const fb.Uint8Reader().read(_bc, _bcOffset + 4);
  int get ub6 => const fb.Uint8Reader().read(_bc, _bcOffset + 5);
  int get ub7 => const fb.Uint8Reader().read(_bc, _bcOffset + 6);
  int get ub8 => const fb.Uint8Reader().read(_bc, _bcOffset + 7);

  @override
  String toString() {
    return 'Ubyte8{ub1: ${ub1}, ub2: ${ub2}, ub3: ${ub3}, ub4: ${ub4}, ub5: ${ub5}, ub6: ${ub6}, ub7: ${ub7}, ub8: ${ub8}}';
  }
}

class _Ubyte8Reader extends fb.StructReader<Ubyte8> {
  const _Ubyte8Reader();

  @override
  int get size => 8;

  @override
  Ubyte8 createObject(fb.BufferContext bc, int offset) => 
    Ubyte8._(bc, offset);
}

class Ubyte8Builder {
  Ubyte8Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int ub1, int ub2, int ub3, int ub4, int ub5, int ub6, int ub7, int ub8) {
    fbBuilder.putUint8(ub8);
    fbBuilder.putUint8(ub7);
    fbBuilder.putUint8(ub6);
    fbBuilder.putUint8(ub5);
    fbBuilder.putUint8(ub4);
    fbBuilder.putUint8(ub3);
    fbBuilder.putUint8(ub2);
    fbBuilder.putUint8(ub1);
    return fbBuilder.offset;
  }

}

class Ubyte8ObjectBuilder extends fb.ObjectBuilder {
  final int _ub1;
  final int _ub2;
  final int _ub3;
  final int _ub4;
  final int _ub5;
  final int _ub6;
  final int _ub7;
  final int _ub8;

  Ubyte8ObjectBuilder({
    required int ub1,
    required int ub2,
    required int ub3,
    required int ub4,
    required int ub5,
    required int ub6,
    required int ub7,
    required int ub8,
  })
      : _ub1 = ub1,
        _ub2 = ub2,
        _ub3 = ub3,
        _ub4 = ub4,
        _ub5 = ub5,
        _ub6 = ub6,
        _ub7 = ub7,
        _ub8 = ub8;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint8(_ub8);
    fbBuilder.putUint8(_ub7);
    fbBuilder.putUint8(_ub6);
    fbBuilder.putUint8(_ub5);
    fbBuilder.putUint8(_ub4);
    fbBuilder.putUint8(_ub3);
    fbBuilder.putUint8(_ub2);
    fbBuilder.putUint8(_ub1);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Ubyte16 {
  Ubyte16._(this._bc, this._bcOffset);

  static const fb.Reader<Ubyte16> reader = _Ubyte16Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Ubyte8 get ub1 => Ubyte8.reader.read(_bc, _bcOffset + 0);
  Ubyte8 get ub2 => Ubyte8.reader.read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'Ubyte16{ub1: ${ub1}, ub2: ${ub2}}';
  }
}

class _Ubyte16Reader extends fb.StructReader<Ubyte16> {
  const _Ubyte16Reader();

  @override
  int get size => 16;

  @override
  Ubyte16 createObject(fb.BufferContext bc, int offset) => 
    Ubyte16._(bc, offset);
}

class Ubyte16Builder {
  Ubyte16Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(fb.StructBuilder ub1, fb.StructBuilder ub2) {
    ub2();
    ub1();
    return fbBuilder.offset;
  }

}

class Ubyte16ObjectBuilder extends fb.ObjectBuilder {
  final Ubyte8ObjectBuilder _ub1;
  final Ubyte8ObjectBuilder _ub2;

  Ubyte16ObjectBuilder({
    required Ubyte8ObjectBuilder ub1,
    required Ubyte8ObjectBuilder ub2,
  })
      : _ub1 = ub1,
        _ub2 = ub2;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    _ub2.finish(fbBuilder);
    _ub1.finish(fbBuilder);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Ubyte32 {
  Ubyte32._(this._bc, this._bcOffset);

  static const fb.Reader<Ubyte32> reader = _Ubyte32Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Ubyte8 get ub1 => Ubyte8.reader.read(_bc, _bcOffset + 0);
  Ubyte8 get ub2 => Ubyte8.reader.read(_bc, _bcOffset + 8);
  Ubyte8 get ub3 => Ubyte8.reader.read(_bc, _bcOffset + 16);
  Ubyte8 get ub4 => Ubyte8.reader.read(_bc, _bcOffset + 24);

  @override
  String toString() {
    return 'Ubyte32{ub1: ${ub1}, ub2: ${ub2}, ub3: ${ub3}, ub4: ${ub4}}';
  }
}

class _Ubyte32Reader extends fb.StructReader<Ubyte32> {
  const _Ubyte32Reader();

  @override
  int get size => 32;

  @override
  Ubyte32 createObject(fb.BufferContext bc, int offset) => 
    Ubyte32._(bc, offset);
}

class Ubyte32Builder {
  Ubyte32Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(fb.StructBuilder ub1, fb.StructBuilder ub2, fb.StructBuilder ub3, fb.StructBuilder ub4) {
    ub4();
    ub3();
    ub2();
    ub1();
    return fbBuilder.offset;
  }

}

class Ubyte32ObjectBuilder extends fb.ObjectBuilder {
  final Ubyte8ObjectBuilder _ub1;
  final Ubyte8ObjectBuilder _ub2;
  final Ubyte8ObjectBuilder _ub3;
  final Ubyte8ObjectBuilder _ub4;

  Ubyte32ObjectBuilder({
    required Ubyte8ObjectBuilder ub1,
    required Ubyte8ObjectBuilder ub2,
    required Ubyte8ObjectBuilder ub3,
    required Ubyte8ObjectBuilder ub4,
  })
      : _ub1 = ub1,
        _ub2 = ub2,
        _ub3 = ub3,
        _ub4 = ub4;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    _ub4.finish(fbBuilder);
    _ub3.finish(fbBuilder);
    _ub2.finish(fbBuilder);
    _ub1.finish(fbBuilder);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Timestamp {
  Timestamp._(this._bc, this._bcOffset);

  static const fb.Reader<Timestamp> reader = _TimestampReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get ts => const fb.Int64Reader().read(_bc, _bcOffset + 0);

  @override
  String toString() {
    return 'Timestamp{ts: ${ts}}';
  }
}

class _TimestampReader extends fb.StructReader<Timestamp> {
  const _TimestampReader();

  @override
  int get size => 8;

  @override
  Timestamp createObject(fb.BufferContext bc, int offset) => 
    Timestamp._(bc, offset);
}

class TimestampBuilder {
  TimestampBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int ts) {
    fbBuilder.putInt64(ts);
    return fbBuilder.offset;
  }

}

class TimestampObjectBuilder extends fb.ObjectBuilder {
  final int _ts;

  TimestampObjectBuilder({
    required int ts,
  })
      : _ts = ts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putInt64(_ts);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Frame {
  Frame._(this._bc, this._bcOffset);
  factory Frame(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Frame> reader = _FrameReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Header? get header => Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get bytes => const fb.Int8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Frame{header: ${header}, bytes: ${bytes}}';
  }
}

class _FrameReader extends fb.TableReader<Frame> {
  const _FrameReader();

  @override
  Frame createObject(fb.BufferContext bc, int offset) => 
    Frame._(bc, offset);
}

class FrameBuilder {
  FrameBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }
  int addBytesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FrameObjectBuilder extends fb.ObjectBuilder {
  final HeaderObjectBuilder? _header;
  final List<int>? _bytes;

  FrameObjectBuilder({
    HeaderObjectBuilder? header,
    List<int>? bytes,
  })
      : _header = header,
        _bytes = bytes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? bytesOffset = _bytes == null ? null
        : fbBuilder.writeListInt8(_bytes!);
    fbBuilder.startTable(2);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, bytesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Header {
  Header._(this._bc, this._bcOffset);

  static const fb.Reader<Header> reader = _HeaderReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get len => const fb.Int32Reader().read(_bc, _bcOffset + 0);
  FrameType get type => FrameType.fromValue(const fb.Int16Reader().read(_bc, _bcOffset + 4));
  int get version => const fb.Int16Reader().read(_bc, _bcOffset + 6);
  Ubyte16 get fromId => Ubyte16.reader.read(_bc, _bcOffset + 8);
  Ubyte16 get toId => Ubyte16.reader.read(_bc, _bcOffset + 24);
  Ubyte16 get forwardId => Ubyte16.reader.read(_bc, _bcOffset + 40);

  @override
  String toString() {
    return 'Header{len: ${len}, type: ${type}, version: ${version}, fromId: ${fromId}, toId: ${toId}, forwardId: ${forwardId}}';
  }
}

class _HeaderReader extends fb.StructReader<Header> {
  const _HeaderReader();

  @override
  int get size => 56;

  @override
  Header createObject(fb.BufferContext bc, int offset) => 
    Header._(bc, offset);
}

class HeaderBuilder {
  HeaderBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int len, FrameType type, int version, fb.StructBuilder fromId, fb.StructBuilder toId, fb.StructBuilder forwardId) {
    forwardId();
    toId();
    fromId();
    fbBuilder.putInt16(version);
    fbBuilder.putInt16(type.value);
    fbBuilder.putInt32(len);
    return fbBuilder.offset;
  }

}

class HeaderObjectBuilder extends fb.ObjectBuilder {
  final int _len;
  final FrameType _type;
  final int _version;
  final Ubyte16ObjectBuilder _fromId;
  final Ubyte16ObjectBuilder _toId;
  final Ubyte16ObjectBuilder _forwardId;

  HeaderObjectBuilder({
    required int len,
    required FrameType type,
    required int version,
    required Ubyte16ObjectBuilder fromId,
    required Ubyte16ObjectBuilder toId,
    required Ubyte16ObjectBuilder forwardId,
  })
      : _len = len,
        _type = type,
        _version = version,
        _fromId = fromId,
        _toId = toId,
        _forwardId = forwardId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    _forwardId.finish(fbBuilder);
    _toId.finish(fbBuilder);
    _fromId.finish(fbBuilder);
    fbBuilder.putInt16(_version);
    fbBuilder.putInt16(_type.value);
    fbBuilder.putInt32(_len);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageBody {
  MessageBody._(this._bc, this._bcOffset);
  factory MessageBody(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageBody> reader = _MessageBodyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Ubyte16? get id => Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 4);
  Ubyte16? get fromId => Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 6);
  Timestamp? get ts => Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get text => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'MessageBody{id: ${id}, fromId: ${fromId}, ts: ${ts}, text: ${text}}';
  }
}

class _MessageBodyReader extends fb.TableReader<MessageBody> {
  const _MessageBodyReader();

  @override
  MessageBody createObject(fb.BufferContext bc, int offset) => 
    MessageBody._(bc, offset);
}

class MessageBodyBuilder {
  MessageBodyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addId(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }
  int addFromId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }
  int addTs(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }
  int addTextOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageBodyObjectBuilder extends fb.ObjectBuilder {
  final Ubyte16ObjectBuilder? _id;
  final Ubyte16ObjectBuilder? _fromId;
  final TimestampObjectBuilder? _ts;
  final String? _text;

  MessageBodyObjectBuilder({
    Ubyte16ObjectBuilder? id,
    Ubyte16ObjectBuilder? fromId,
    TimestampObjectBuilder? ts,
    String? text,
  })
      : _id = id,
        _fromId = fromId,
        _ts = ts,
        _text = text;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? textOffset = _text == null ? null
        : fbBuilder.writeString(_text!);
    fbBuilder.startTable(4);
    if (_id != null) {
      fbBuilder.addStruct(0, _id!.finish(fbBuilder));
    }
    if (_fromId != null) {
      fbBuilder.addStruct(1, _fromId!.finish(fbBuilder));
    }
    if (_ts != null) {
      fbBuilder.addStruct(2, _ts!.finish(fbBuilder));
    }
    fbBuilder.addOffset(3, textOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Message {
  Message._(this._bc, this._bcOffset);
  factory Message(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Message> reader = _MessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Header? get header => Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  MessageBody? get body => MessageBody.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Message{header: ${header}, body: ${body}}';
  }
}

class _MessageReader extends fb.TableReader<Message> {
  const _MessageReader();

  @override
  Message createObject(fb.BufferContext bc, int offset) => 
    Message._(bc, offset);
}

class MessageBuilder {
  MessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageObjectBuilder extends fb.ObjectBuilder {
  final HeaderObjectBuilder? _header;
  final MessageBodyObjectBuilder? _body;

  MessageObjectBuilder({
    HeaderObjectBuilder? header,
    MessageBodyObjectBuilder? body,
  })
      : _header = header,
        _body = body;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? bodyOffset = _body?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    fbBuilder.addOffset(1, bodyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageAck {
  MessageAck._(this._bc, this._bcOffset);
  factory MessageAck(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageAck> reader = _MessageAckReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Header? get header => Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  Ubyte16? get id => Ubyte16.reader.vTableGetNullable(_bc, _bcOffset, 6);
  Timestamp? get ts => Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'MessageAck{header: ${header}, id: ${id}, ts: ${ts}}';
  }
}

class _MessageAckReader extends fb.TableReader<MessageAck> {
  const _MessageAckReader();

  @override
  MessageAck createObject(fb.BufferContext bc, int offset) => 
    MessageAck._(bc, offset);
}

class MessageAckBuilder {
  MessageAckBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addHeader(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }
  int addId(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }
  int addTs(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageAckObjectBuilder extends fb.ObjectBuilder {
  final HeaderObjectBuilder? _header;
  final Ubyte16ObjectBuilder? _id;
  final TimestampObjectBuilder? _ts;

  MessageAckObjectBuilder({
    HeaderObjectBuilder? header,
    Ubyte16ObjectBuilder? id,
    TimestampObjectBuilder? ts,
  })
      : _header = header,
        _id = id,
        _ts = ts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    if (_header != null) {
      fbBuilder.addStruct(0, _header!.finish(fbBuilder));
    }
    if (_id != null) {
      fbBuilder.addStruct(1, _id!.finish(fbBuilder));
    }
    if (_ts != null) {
      fbBuilder.addStruct(2, _ts!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
