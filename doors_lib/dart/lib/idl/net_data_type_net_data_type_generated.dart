// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library net_data_type;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './base_base_generated.dart' as base;

enum NetDataType {
  none(0),
  net_discovery(1),
  chat(2);

  final int value;
  const NetDataType(this.value);

  factory NetDataType.fromValue(int value) {
    switch (value) {
      case 0:
        return NetDataType.none;
      case 1:
        return NetDataType.net_discovery;
      case 2:
        return NetDataType.chat;
      default:
        throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static NetDataType? _createOrNull(int? value) => value == null ? null : NetDataType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static const fb.Reader<NetDataType> reader = _NetDataTypeReader();
}

class _NetDataTypeReader extends fb.Reader<NetDataType> {
  const _NetDataTypeReader();

  @override
  int get size => 4;

  @override
  NetDataType read(fb.BufferContext bc, int offset) => NetDataType.fromValue(const fb.Uint32Reader().read(bc, offset));
}
