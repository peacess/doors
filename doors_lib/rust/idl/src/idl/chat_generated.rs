// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::{cmp::Ordering, mem};

use crate::{base_generated::*, ffi_rpc_generated::*};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod chat {

    use core::{cmp::Ordering, mem};

    use crate::{base_generated::*, ffi_rpc_generated::*};

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum TextMessageOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct TextMessage<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for TextMessage<'a> {
        type Inner = TextMessage<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> TextMessage<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_FROM_PARTNER_ID: flatbuffers::VOffsetT = 6;
        pub const VT_TO_PARTNER_ID: flatbuffers::VOffsetT = 8;
        pub const VT_FROM_TERMINAL_ID: flatbuffers::VOffsetT = 10;
        pub const VT_TO_TERMINAL_ID: flatbuffers::VOffsetT = 12;
        pub const VT_TS: flatbuffers::VOffsetT = 14;
        pub const VT_TEXT: flatbuffers::VOffsetT = 16;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            TextMessage { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args TextMessageArgs<'args>,
        ) -> flatbuffers::WIPOffset<TextMessage<'bldr>> {
            let mut builder = TextMessageBuilder::new(_fbb);
            if let Some(x) = args.text {
                builder.add_text(x);
            }
            if let Some(x) = args.ts {
                builder.add_ts(x);
            }
            if let Some(x) = args.to_terminal_id {
                builder.add_to_terminal_id(x);
            }
            if let Some(x) = args.from_terminal_id {
                builder.add_from_terminal_id(x);
            }
            if let Some(x) = args.to_partner_id {
                builder.add_to_partner_id(x);
            }
            if let Some(x) = args.from_partner_id {
                builder.add_from_partner_id(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(TextMessage::VT_ID, None) }
        }
        #[inline]
        pub fn from_partner_id(&self) -> Option<&'a super::base::PartnerId> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::PartnerId>(TextMessage::VT_FROM_PARTNER_ID, None) }
        }
        #[inline]
        pub fn to_partner_id(&self) -> Option<&'a super::base::PartnerId> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::PartnerId>(TextMessage::VT_TO_PARTNER_ID, None) }
        }
        #[inline]
        pub fn from_terminal_id(&self) -> Option<&'a super::base::TerminalId> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::TerminalId>(TextMessage::VT_FROM_TERMINAL_ID, None) }
        }
        #[inline]
        pub fn to_terminal_id(&self) -> Option<&'a super::base::TerminalId> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::TerminalId>(TextMessage::VT_TO_TERMINAL_ID, None) }
        }
        #[inline]
        pub fn ts(&self) -> Option<&'a super::base::Timestamp> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::Timestamp>(TextMessage::VT_TS, None) }
        }
        #[inline]
        pub fn text(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TextMessage::VT_TEXT, None) }
        }
    }

    impl flatbuffers::Verifiable for TextMessage<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<super::base::PartnerId>("from_partner_id", Self::VT_FROM_PARTNER_ID, false)?
                .visit_field::<super::base::PartnerId>("to_partner_id", Self::VT_TO_PARTNER_ID, false)?
                .visit_field::<super::base::TerminalId>("from_terminal_id", Self::VT_FROM_TERMINAL_ID, false)?
                .visit_field::<super::base::TerminalId>("to_terminal_id", Self::VT_TO_TERMINAL_ID, false)?
                .visit_field::<super::base::Timestamp>("ts", Self::VT_TS, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("text", Self::VT_TEXT, false)?
                .finish();
            Ok(())
        }
    }
    pub struct TextMessageArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub from_partner_id: Option<&'a super::base::PartnerId>,
        pub to_partner_id: Option<&'a super::base::PartnerId>,
        pub from_terminal_id: Option<&'a super::base::TerminalId>,
        pub to_terminal_id: Option<&'a super::base::TerminalId>,
        pub ts: Option<&'a super::base::Timestamp>,
        pub text: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for TextMessageArgs<'a> {
        #[inline]
        fn default() -> Self {
            TextMessageArgs {
                id: None,
                from_partner_id: None,
                to_partner_id: None,
                from_terminal_id: None,
                to_terminal_id: None,
                ts: None,
                text: None,
            }
        }
    }

    pub struct TextMessageBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TextMessageBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(TextMessage::VT_ID, id);
        }
        #[inline]
        pub fn add_from_partner_id(&mut self, from_partner_id: &super::base::PartnerId) {
            self.fbb_
                .push_slot_always::<&super::base::PartnerId>(TextMessage::VT_FROM_PARTNER_ID, from_partner_id);
        }
        #[inline]
        pub fn add_to_partner_id(&mut self, to_partner_id: &super::base::PartnerId) {
            self.fbb_
                .push_slot_always::<&super::base::PartnerId>(TextMessage::VT_TO_PARTNER_ID, to_partner_id);
        }
        #[inline]
        pub fn add_from_terminal_id(&mut self, from_terminal_id: &super::base::TerminalId) {
            self.fbb_
                .push_slot_always::<&super::base::TerminalId>(TextMessage::VT_FROM_TERMINAL_ID, from_terminal_id);
        }
        #[inline]
        pub fn add_to_terminal_id(&mut self, to_terminal_id: &super::base::TerminalId) {
            self.fbb_
                .push_slot_always::<&super::base::TerminalId>(TextMessage::VT_TO_TERMINAL_ID, to_terminal_id);
        }
        #[inline]
        pub fn add_ts(&mut self, ts: &super::base::Timestamp) {
            self.fbb_.push_slot_always::<&super::base::Timestamp>(TextMessage::VT_TS, ts);
        }
        #[inline]
        pub fn add_text(&mut self, text: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TextMessage::VT_TEXT, text);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TextMessageBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            TextMessageBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<TextMessage<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for TextMessage<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("TextMessage");
            ds.field("id", &self.id());
            ds.field("from_partner_id", &self.from_partner_id());
            ds.field("to_partner_id", &self.to_partner_id());
            ds.field("from_terminal_id", &self.from_terminal_id());
            ds.field("to_terminal_id", &self.to_terminal_id());
            ds.field("ts", &self.ts());
            ds.field("text", &self.text());
            ds.finish()
        }
    }
    pub enum TextMessageAckOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct TextMessageAck<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for TextMessageAck<'a> {
        type Inner = TextMessageAck<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> TextMessageAck<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_SEND_ID: flatbuffers::VOffsetT = 6;
        pub const VT_TS: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            TextMessageAck { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args TextMessageAckArgs<'args>,
        ) -> flatbuffers::WIPOffset<TextMessageAck<'bldr>> {
            let mut builder = TextMessageAckBuilder::new(_fbb);
            if let Some(x) = args.ts {
                builder.add_ts(x);
            }
            if let Some(x) = args.send_id {
                builder.add_send_id(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(TextMessageAck::VT_ID, None) }
        }
        #[inline]
        pub fn send_id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(TextMessageAck::VT_SEND_ID, None) }
        }
        #[inline]
        pub fn ts(&self) -> Option<&'a super::base::Timestamp> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::Timestamp>(TextMessageAck::VT_TS, None) }
        }
    }

    impl flatbuffers::Verifiable for TextMessageAck<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<super::base::UlidBytes>("send_id", Self::VT_SEND_ID, false)?
                .visit_field::<super::base::Timestamp>("ts", Self::VT_TS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct TextMessageAckArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub send_id: Option<&'a super::base::UlidBytes>,
        pub ts: Option<&'a super::base::Timestamp>,
    }
    impl<'a> Default for TextMessageAckArgs<'a> {
        #[inline]
        fn default() -> Self {
            TextMessageAckArgs {
                id: None,
                send_id: None,
                ts: None,
            }
        }
    }

    pub struct TextMessageAckBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TextMessageAckBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(TextMessageAck::VT_ID, id);
        }
        #[inline]
        pub fn add_send_id(&mut self, send_id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(TextMessageAck::VT_SEND_ID, send_id);
        }
        #[inline]
        pub fn add_ts(&mut self, ts: &super::base::Timestamp) {
            self.fbb_.push_slot_always::<&super::base::Timestamp>(TextMessageAck::VT_TS, ts);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TextMessageAckBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            TextMessageAckBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<TextMessageAck<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for TextMessageAck<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("TextMessageAck");
            ds.field("id", &self.id());
            ds.field("send_id", &self.send_id());
            ds.field("ts", &self.ts());
            ds.finish()
        }
    }
} // pub mod chat
