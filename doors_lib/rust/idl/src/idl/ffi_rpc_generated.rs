// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::{cmp::Ordering, mem};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod ffi_rpc {

    use core::{cmp::Ordering, mem};

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    // struct FfiRpcHeader, aligned to 8
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct FfiRpcHeader(pub [u8; 16]);
    impl Default for FfiRpcHeader {
        fn default() -> Self {
            Self([0; 16])
        }
    }
    impl core::fmt::Debug for FfiRpcHeader {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            f.debug_struct("FfiRpcHeader")
                .field("len", &self.len())
                .field("rpc_type", &self.rpc_type())
                .field("version", &self.version())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for FfiRpcHeader {}
    impl<'a> flatbuffers::Follow<'a> for FfiRpcHeader {
        type Inner = &'a FfiRpcHeader;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a FfiRpcHeader>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a FfiRpcHeader {
        type Inner = &'a FfiRpcHeader;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<FfiRpcHeader>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for FfiRpcHeader {
        type Output = FfiRpcHeader;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            let src = ::core::slice::from_raw_parts(self as *const FfiRpcHeader as *const u8, <Self as flatbuffers::Push>::size());
            dst.copy_from_slice(src);
        }
        #[inline]
        fn alignment() -> flatbuffers::PushAlignment {
            flatbuffers::PushAlignment::new(8)
        }
    }

    impl<'a> flatbuffers::Verifiable for FfiRpcHeader {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }

    impl<'a> FfiRpcHeader {
        #[allow(clippy::too_many_arguments)]
        pub fn new(len: u64, rpc_type: u32, version: u16) -> Self {
            let mut s = Self([0; 16]);
            s.set_len(len);
            s.set_rpc_type(rpc_type);
            s.set_version(version);
            s
        }

        pub fn len(&self) -> u64 {
            let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_len(&mut self, x: u64) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn rpc_type(&self) -> u32 {
            let mut mem = core::mem::MaybeUninit::<<u32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[8..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_rpc_type(&mut self, x: u32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[8..].as_mut_ptr(),
                    core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn version(&self) -> u16 {
            let mut mem = core::mem::MaybeUninit::<<u16 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[12..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_version(&mut self, x: u16) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[12..].as_mut_ptr(),
                    core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
                );
            }
        }
    }

    pub enum FfiRpcFrameOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct FfiRpcFrame<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for FfiRpcFrame<'a> {
        type Inner = FfiRpcFrame<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> FfiRpcFrame<'a> {
        pub const VT_HEADER: flatbuffers::VOffsetT = 4;
        pub const VT_BYTES: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            FfiRpcFrame { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args FfiRpcFrameArgs<'args>,
        ) -> flatbuffers::WIPOffset<FfiRpcFrame<'bldr>> {
            let mut builder = FfiRpcFrameBuilder::new(_fbb);
            if let Some(x) = args.bytes {
                builder.add_bytes(x);
            }
            if let Some(x) = args.header {
                builder.add_header(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn header(&self) -> Option<&'a FfiRpcHeader> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<FfiRpcHeader>(FfiRpcFrame::VT_HEADER, None) }
        }
        #[inline]
        pub fn bytes(&self) -> Option<flatbuffers::Vector<'a, i8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(FfiRpcFrame::VT_BYTES, None)
            }
        }
    }

    impl flatbuffers::Verifiable for FfiRpcFrame<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<FfiRpcHeader>("header", Self::VT_HEADER, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>("bytes", Self::VT_BYTES, false)?
                .finish();
            Ok(())
        }
    }
    pub struct FfiRpcFrameArgs<'a> {
        pub header: Option<&'a FfiRpcHeader>,
        pub bytes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
    }
    impl<'a> Default for FfiRpcFrameArgs<'a> {
        #[inline]
        fn default() -> Self {
            FfiRpcFrameArgs { header: None, bytes: None }
        }
    }

    pub struct FfiRpcFrameBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FfiRpcFrameBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_header(&mut self, header: &FfiRpcHeader) {
            self.fbb_.push_slot_always::<&FfiRpcHeader>(FfiRpcFrame::VT_HEADER, header);
        }
        #[inline]
        pub fn add_bytes(&mut self, bytes: flatbuffers::WIPOffset<flatbuffers::Vector<'b, i8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FfiRpcFrame::VT_BYTES, bytes);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FfiRpcFrameBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            FfiRpcFrameBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<FfiRpcFrame<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for FfiRpcFrame<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("FfiRpcFrame");
            ds.field("header", &self.header());
            ds.field("bytes", &self.bytes());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `FfiRpcFrame`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_ffi_rpc_frame_unchecked`.
    pub fn root_as_ffi_rpc_frame(buf: &[u8]) -> Result<FfiRpcFrame, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<FfiRpcFrame>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `FfiRpcFrame` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_ffi_rpc_frame_unchecked`.
    pub fn size_prefixed_root_as_ffi_rpc_frame(buf: &[u8]) -> Result<FfiRpcFrame, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<FfiRpcFrame>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `FfiRpcFrame` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_ffi_rpc_frame_unchecked`.
    pub fn root_as_ffi_rpc_frame_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<FfiRpcFrame<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<FfiRpcFrame<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `FfiRpcFrame` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_ffi_rpc_frame_unchecked`.
    pub fn size_prefixed_root_as_ffi_rpc_frame_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<FfiRpcFrame<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<FfiRpcFrame<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a FfiRpcFrame and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `FfiRpcFrame`.
    pub unsafe fn root_as_ffi_rpc_frame_unchecked(buf: &[u8]) -> FfiRpcFrame {
        flatbuffers::root_unchecked::<FfiRpcFrame>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed FfiRpcFrame and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `FfiRpcFrame`.
    pub unsafe fn size_prefixed_root_as_ffi_rpc_frame_unchecked(buf: &[u8]) -> FfiRpcFrame {
        flatbuffers::size_prefixed_root_unchecked::<FfiRpcFrame>(buf)
    }
    #[inline]
    pub fn finish_ffi_rpc_frame_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<FfiRpcFrame<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_ffi_rpc_frame_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<FfiRpcFrame<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod ffi_rpc
