// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::{cmp::Ordering, mem};

use crate::{base_generated::*, ffi_rpc_generated::*};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod net_discovery {

    use core::{cmp::Ordering, mem};

    use crate::{base_generated::*, ffi_rpc_generated::*};

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    // struct DiscoveryHeader, aligned to 8
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct DiscoveryHeader(pub [u8; 56]);
    impl Default for DiscoveryHeader {
        fn default() -> Self {
            Self([0; 56])
        }
    }
    impl core::fmt::Debug for DiscoveryHeader {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            f.debug_struct("DiscoveryHeader")
                .field("header_type", &self.header_type())
                .field("len", &self.len())
                .field("discovery_type", &self.discovery_type())
                .field("key", &self.key())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for DiscoveryHeader {}
    impl<'a> flatbuffers::Follow<'a> for DiscoveryHeader {
        type Inner = &'a DiscoveryHeader;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a DiscoveryHeader>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a DiscoveryHeader {
        type Inner = &'a DiscoveryHeader;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<DiscoveryHeader>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for DiscoveryHeader {
        type Output = DiscoveryHeader;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            let src = ::core::slice::from_raw_parts(self as *const DiscoveryHeader as *const u8, <Self as flatbuffers::Push>::size());
            dst.copy_from_slice(src);
        }
        #[inline]
        fn alignment() -> flatbuffers::PushAlignment {
            flatbuffers::PushAlignment::new(8)
        }
    }

    impl<'a> flatbuffers::Verifiable for DiscoveryHeader {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }

    impl<'a> DiscoveryHeader {
        #[allow(clippy::too_many_arguments)]
        pub fn new(header_type: u16, len: u64, discovery_type: u32, key: &super::base::X25519Public) -> Self {
            let mut s = Self([0; 56]);
            s.set_header_type(header_type);
            s.set_len(len);
            s.set_discovery_type(discovery_type);
            s.set_key(key);
            s
        }

        pub fn header_type(&self) -> u16 {
            let mut mem = core::mem::MaybeUninit::<<u16 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_header_type(&mut self, x: u16) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn len(&self) -> u64 {
            let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[8..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_len(&mut self, x: u64) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[8..].as_mut_ptr(),
                    core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn discovery_type(&self) -> u32 {
            let mut mem = core::mem::MaybeUninit::<<u32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[16..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_discovery_type(&mut self, x: u32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[16..].as_mut_ptr(),
                    core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn key(&self) -> &super::base::X25519Public {
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid struct in this slot
            unsafe { &*(self.0[24..].as_ptr() as *const super::base::X25519Public) }
        }

        #[allow(clippy::identity_op)]
        pub fn set_key(&mut self, x: &super::base::X25519Public) {
            self.0[24..24 + 32].copy_from_slice(&x.0)
        }
    }

    pub enum DnsTerminalOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct DnsTerminal<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for DnsTerminal<'a> {
        type Inner = DnsTerminal<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> DnsTerminal<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_PARTER_ID: flatbuffers::VOffsetT = 6;
        pub const VT_TERMINAL_ID: flatbuffers::VOffsetT = 8;
        pub const VT_HOST_NAME: flatbuffers::VOffsetT = 10;
        pub const VT_IP_V4: flatbuffers::VOffsetT = 12;
        pub const VT_PORT_V4: flatbuffers::VOffsetT = 14;
        pub const VT_IP_V6: flatbuffers::VOffsetT = 16;
        pub const VT_PORT_V6: flatbuffers::VOffsetT = 18;
        pub const VT_KEY: flatbuffers::VOffsetT = 20;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            DnsTerminal { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args DnsTerminalArgs<'args>,
        ) -> flatbuffers::WIPOffset<DnsTerminal<'bldr>> {
            let mut builder = DnsTerminalBuilder::new(_fbb);
            builder.add_ip_v6(args.ip_v6);
            if let Some(x) = args.key {
                builder.add_key(x);
            }
            builder.add_ip_v4(args.ip_v4);
            if let Some(x) = args.host_name {
                builder.add_host_name(x);
            }
            if let Some(x) = args.terminal_id {
                builder.add_terminal_id(x);
            }
            if let Some(x) = args.parter_id {
                builder.add_parter_id(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.add_port_v6(args.port_v6);
            builder.add_port_v4(args.port_v4);
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(DnsTerminal::VT_ID, None) }
        }
        #[inline]
        pub fn parter_id(&self) -> Option<&'a super::base::PartnerId> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::PartnerId>(DnsTerminal::VT_PARTER_ID, None) }
        }
        #[inline]
        pub fn terminal_id(&self) -> Option<&'a super::base::TerminalId> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::TerminalId>(DnsTerminal::VT_TERMINAL_ID, None) }
        }
        #[inline]
        pub fn host_name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DnsTerminal::VT_HOST_NAME, None) }
        }
        #[inline]
        pub fn ip_v4(&self) -> u32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u32>(DnsTerminal::VT_IP_V4, Some(0)).unwrap() }
        }
        #[inline]
        pub fn port_v4(&self) -> u16 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u16>(DnsTerminal::VT_PORT_V4, Some(0)).unwrap() }
        }
        #[inline]
        pub fn ip_v6(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u64>(DnsTerminal::VT_IP_V6, Some(0)).unwrap() }
        }
        #[inline]
        pub fn port_v6(&self) -> u16 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u16>(DnsTerminal::VT_PORT_V6, Some(0)).unwrap() }
        }
        #[inline]
        pub fn key(&self) -> Option<&'a super::base::X25519Public> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::X25519Public>(DnsTerminal::VT_KEY, None) }
        }
    }

    impl flatbuffers::Verifiable for DnsTerminal<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<super::base::PartnerId>("parter_id", Self::VT_PARTER_ID, false)?
                .visit_field::<super::base::TerminalId>("terminal_id", Self::VT_TERMINAL_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("host_name", Self::VT_HOST_NAME, false)?
                .visit_field::<u32>("ip_v4", Self::VT_IP_V4, false)?
                .visit_field::<u16>("port_v4", Self::VT_PORT_V4, false)?
                .visit_field::<u64>("ip_v6", Self::VT_IP_V6, false)?
                .visit_field::<u16>("port_v6", Self::VT_PORT_V6, false)?
                .visit_field::<super::base::X25519Public>("key", Self::VT_KEY, false)?
                .finish();
            Ok(())
        }
    }
    pub struct DnsTerminalArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub parter_id: Option<&'a super::base::PartnerId>,
        pub terminal_id: Option<&'a super::base::TerminalId>,
        pub host_name: Option<flatbuffers::WIPOffset<&'a str>>,
        pub ip_v4: u32,
        pub port_v4: u16,
        pub ip_v6: u64,
        pub port_v6: u16,
        pub key: Option<&'a super::base::X25519Public>,
    }
    impl<'a> Default for DnsTerminalArgs<'a> {
        #[inline]
        fn default() -> Self {
            DnsTerminalArgs {
                id: None,
                parter_id: None,
                terminal_id: None,
                host_name: None,
                ip_v4: 0,
                port_v4: 0,
                ip_v6: 0,
                port_v6: 0,
                key: None,
            }
        }
    }

    pub struct DnsTerminalBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DnsTerminalBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(DnsTerminal::VT_ID, id);
        }
        #[inline]
        pub fn add_parter_id(&mut self, parter_id: &super::base::PartnerId) {
            self.fbb_.push_slot_always::<&super::base::PartnerId>(DnsTerminal::VT_PARTER_ID, parter_id);
        }
        #[inline]
        pub fn add_terminal_id(&mut self, terminal_id: &super::base::TerminalId) {
            self.fbb_.push_slot_always::<&super::base::TerminalId>(DnsTerminal::VT_TERMINAL_ID, terminal_id);
        }
        #[inline]
        pub fn add_host_name(&mut self, host_name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DnsTerminal::VT_HOST_NAME, host_name);
        }
        #[inline]
        pub fn add_ip_v4(&mut self, ip_v4: u32) {
            self.fbb_.push_slot::<u32>(DnsTerminal::VT_IP_V4, ip_v4, 0);
        }
        #[inline]
        pub fn add_port_v4(&mut self, port_v4: u16) {
            self.fbb_.push_slot::<u16>(DnsTerminal::VT_PORT_V4, port_v4, 0);
        }
        #[inline]
        pub fn add_ip_v6(&mut self, ip_v6: u64) {
            self.fbb_.push_slot::<u64>(DnsTerminal::VT_IP_V6, ip_v6, 0);
        }
        #[inline]
        pub fn add_port_v6(&mut self, port_v6: u16) {
            self.fbb_.push_slot::<u16>(DnsTerminal::VT_PORT_V6, port_v6, 0);
        }
        #[inline]
        pub fn add_key(&mut self, key: &super::base::X25519Public) {
            self.fbb_.push_slot_always::<&super::base::X25519Public>(DnsTerminal::VT_KEY, key);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DnsTerminalBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            DnsTerminalBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<DnsTerminal<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for DnsTerminal<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("DnsTerminal");
            ds.field("id", &self.id());
            ds.field("parter_id", &self.parter_id());
            ds.field("terminal_id", &self.terminal_id());
            ds.field("host_name", &self.host_name());
            ds.field("ip_v4", &self.ip_v4());
            ds.field("port_v4", &self.port_v4());
            ds.field("ip_v6", &self.ip_v6());
            ds.field("port_v6", &self.port_v6());
            ds.field("key", &self.key());
            ds.finish()
        }
    }
    pub enum DiscoveryFrameOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct DiscoveryFrame<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for DiscoveryFrame<'a> {
        type Inner = DiscoveryFrame<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> DiscoveryFrame<'a> {
        pub const VT_HEADER: flatbuffers::VOffsetT = 4;
        pub const VT_BYTES: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            DiscoveryFrame { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args DiscoveryFrameArgs<'args>,
        ) -> flatbuffers::WIPOffset<DiscoveryFrame<'bldr>> {
            let mut builder = DiscoveryFrameBuilder::new(_fbb);
            if let Some(x) = args.bytes {
                builder.add_bytes(x);
            }
            if let Some(x) = args.header {
                builder.add_header(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn header(&self) -> Option<&'a DiscoveryHeader> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<DiscoveryHeader>(DiscoveryFrame::VT_HEADER, None) }
        }
        #[inline]
        pub fn bytes(&self) -> Option<flatbuffers::Vector<'a, i8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(DiscoveryFrame::VT_BYTES, None)
            }
        }
    }

    impl flatbuffers::Verifiable for DiscoveryFrame<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<DiscoveryHeader>("header", Self::VT_HEADER, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>("bytes", Self::VT_BYTES, false)?
                .finish();
            Ok(())
        }
    }
    pub struct DiscoveryFrameArgs<'a> {
        pub header: Option<&'a DiscoveryHeader>,
        pub bytes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
    }
    impl<'a> Default for DiscoveryFrameArgs<'a> {
        #[inline]
        fn default() -> Self {
            DiscoveryFrameArgs { header: None, bytes: None }
        }
    }

    pub struct DiscoveryFrameBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DiscoveryFrameBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_header(&mut self, header: &DiscoveryHeader) {
            self.fbb_.push_slot_always::<&DiscoveryHeader>(DiscoveryFrame::VT_HEADER, header);
        }
        #[inline]
        pub fn add_bytes(&mut self, bytes: flatbuffers::WIPOffset<flatbuffers::Vector<'b, i8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiscoveryFrame::VT_BYTES, bytes);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DiscoveryFrameBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            DiscoveryFrameBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<DiscoveryFrame<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for DiscoveryFrame<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("DiscoveryFrame");
            ds.field("header", &self.header());
            ds.field("bytes", &self.bytes());
            ds.finish()
        }
    }
    pub enum HiOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Hi<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Hi<'a> {
        type Inner = Hi<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Hi<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_DNS_TERMINAL: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Hi { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args HiArgs<'args>,
        ) -> flatbuffers::WIPOffset<Hi<'bldr>> {
            let mut builder = HiBuilder::new(_fbb);
            if let Some(x) = args.dns_terminal {
                builder.add_dns_terminal(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(Hi::VT_ID, None) }
        }
        #[inline]
        pub fn dns_terminal(&self) -> Option<DnsTerminal<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<DnsTerminal>>(Hi::VT_DNS_TERMINAL, None) }
        }
    }

    impl flatbuffers::Verifiable for Hi<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<DnsTerminal>>("dns_terminal", Self::VT_DNS_TERMINAL, false)?
                .finish();
            Ok(())
        }
    }
    pub struct HiArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub dns_terminal: Option<flatbuffers::WIPOffset<DnsTerminal<'a>>>,
    }
    impl<'a> Default for HiArgs<'a> {
        #[inline]
        fn default() -> Self {
            HiArgs { id: None, dns_terminal: None }
        }
    }

    pub struct HiBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HiBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(Hi::VT_ID, id);
        }
        #[inline]
        pub fn add_dns_terminal(&mut self, dns_terminal: flatbuffers::WIPOffset<DnsTerminal<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<DnsTerminal>>(Hi::VT_DNS_TERMINAL, dns_terminal);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HiBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            HiBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Hi<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Hi<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Hi");
            ds.field("id", &self.id());
            ds.field("dns_terminal", &self.dns_terminal());
            ds.finish()
        }
    }
    pub enum HiRecvOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct HiRecv<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for HiRecv<'a> {
        type Inner = HiRecv<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> HiRecv<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_HI_ID: flatbuffers::VOffsetT = 6;
        pub const VT_DNS_TERMINAL: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            HiRecv { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args HiRecvArgs<'args>,
        ) -> flatbuffers::WIPOffset<HiRecv<'bldr>> {
            let mut builder = HiRecvBuilder::new(_fbb);
            if let Some(x) = args.dns_terminal {
                builder.add_dns_terminal(x);
            }
            if let Some(x) = args.hi_id {
                builder.add_hi_id(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(HiRecv::VT_ID, None) }
        }
        #[inline]
        pub fn hi_id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(HiRecv::VT_HI_ID, None) }
        }
        #[inline]
        pub fn dns_terminal(&self) -> Option<DnsTerminal<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<DnsTerminal>>(HiRecv::VT_DNS_TERMINAL, None) }
        }
    }

    impl flatbuffers::Verifiable for HiRecv<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<super::base::UlidBytes>("hi_id", Self::VT_HI_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<DnsTerminal>>("dns_terminal", Self::VT_DNS_TERMINAL, false)?
                .finish();
            Ok(())
        }
    }
    pub struct HiRecvArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub hi_id: Option<&'a super::base::UlidBytes>,
        pub dns_terminal: Option<flatbuffers::WIPOffset<DnsTerminal<'a>>>,
    }
    impl<'a> Default for HiRecvArgs<'a> {
        #[inline]
        fn default() -> Self {
            HiRecvArgs {
                id: None,
                hi_id: None,
                dns_terminal: None,
            }
        }
    }

    pub struct HiRecvBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HiRecvBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(HiRecv::VT_ID, id);
        }
        #[inline]
        pub fn add_hi_id(&mut self, hi_id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(HiRecv::VT_HI_ID, hi_id);
        }
        #[inline]
        pub fn add_dns_terminal(&mut self, dns_terminal: flatbuffers::WIPOffset<DnsTerminal<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<DnsTerminal>>(HiRecv::VT_DNS_TERMINAL, dns_terminal);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HiRecvBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            HiRecvBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<HiRecv<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for HiRecv<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("HiRecv");
            ds.field("id", &self.id());
            ds.field("hi_id", &self.hi_id());
            ds.field("dns_terminal", &self.dns_terminal());
            ds.finish()
        }
    }
    pub enum QueryDnsTerminalOutOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct QueryDnsTerminalOut<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for QueryDnsTerminalOut<'a> {
        type Inner = QueryDnsTerminalOut<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> QueryDnsTerminalOut<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_IN_ID: flatbuffers::VOffsetT = 6;
        pub const VT_DNS_TERMINAL: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            QueryDnsTerminalOut { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args QueryDnsTerminalOutArgs<'args>,
        ) -> flatbuffers::WIPOffset<QueryDnsTerminalOut<'bldr>> {
            let mut builder = QueryDnsTerminalOutBuilder::new(_fbb);
            if let Some(x) = args.dns_terminal {
                builder.add_dns_terminal(x);
            }
            if let Some(x) = args.in_id {
                builder.add_in_id(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(QueryDnsTerminalOut::VT_ID, None) }
        }
        #[inline]
        pub fn in_id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(QueryDnsTerminalOut::VT_IN_ID, None) }
        }
        #[inline]
        pub fn dns_terminal(&self) -> Option<DnsTerminal<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<DnsTerminal>>(QueryDnsTerminalOut::VT_DNS_TERMINAL, None)
            }
        }
    }

    impl flatbuffers::Verifiable for QueryDnsTerminalOut<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<super::base::UlidBytes>("in_id", Self::VT_IN_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<DnsTerminal>>("dns_terminal", Self::VT_DNS_TERMINAL, false)?
                .finish();
            Ok(())
        }
    }
    pub struct QueryDnsTerminalOutArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub in_id: Option<&'a super::base::UlidBytes>,
        pub dns_terminal: Option<flatbuffers::WIPOffset<DnsTerminal<'a>>>,
    }
    impl<'a> Default for QueryDnsTerminalOutArgs<'a> {
        #[inline]
        fn default() -> Self {
            QueryDnsTerminalOutArgs {
                id: None,
                in_id: None,
                dns_terminal: None,
            }
        }
    }

    pub struct QueryDnsTerminalOutBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> QueryDnsTerminalOutBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(QueryDnsTerminalOut::VT_ID, id);
        }
        #[inline]
        pub fn add_in_id(&mut self, in_id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(QueryDnsTerminalOut::VT_IN_ID, in_id);
        }
        #[inline]
        pub fn add_dns_terminal(&mut self, dns_terminal: flatbuffers::WIPOffset<DnsTerminal<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<DnsTerminal>>(QueryDnsTerminalOut::VT_DNS_TERMINAL, dns_terminal);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> QueryDnsTerminalOutBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            QueryDnsTerminalOutBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<QueryDnsTerminalOut<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for QueryDnsTerminalOut<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("QueryDnsTerminalOut");
            ds.field("id", &self.id());
            ds.field("in_id", &self.in_id());
            ds.field("dns_terminal", &self.dns_terminal());
            ds.finish()
        }
    }
    pub enum QueryDnsTerminalInOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct QueryDnsTerminalIn<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for QueryDnsTerminalIn<'a> {
        type Inner = QueryDnsTerminalIn<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> QueryDnsTerminalIn<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            QueryDnsTerminalIn { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args QueryDnsTerminalInArgs<'args>,
        ) -> flatbuffers::WIPOffset<QueryDnsTerminalIn<'bldr>> {
            let mut builder = QueryDnsTerminalInBuilder::new(_fbb);
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(QueryDnsTerminalIn::VT_ID, None) }
        }
    }

    impl flatbuffers::Verifiable for QueryDnsTerminalIn<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?.visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?.finish();
            Ok(())
        }
    }
    pub struct QueryDnsTerminalInArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
    }
    impl<'a> Default for QueryDnsTerminalInArgs<'a> {
        #[inline]
        fn default() -> Self {
            QueryDnsTerminalInArgs { id: None }
        }
    }

    pub struct QueryDnsTerminalInBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> QueryDnsTerminalInBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(QueryDnsTerminalIn::VT_ID, id);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> QueryDnsTerminalInBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            QueryDnsTerminalInBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<QueryDnsTerminalIn<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for QueryDnsTerminalIn<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("QueryDnsTerminalIn");
            ds.field("id", &self.id());
            ds.finish()
        }
    }
    pub enum QueryPartnersOutOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct QueryPartnersOut<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for QueryPartnersOut<'a> {
        type Inner = QueryPartnersOut<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> QueryPartnersOut<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_IN_ID: flatbuffers::VOffsetT = 6;
        pub const VT_DNS_PARTNERS: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            QueryPartnersOut { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args QueryPartnersOutArgs<'args>,
        ) -> flatbuffers::WIPOffset<QueryPartnersOut<'bldr>> {
            let mut builder = QueryPartnersOutBuilder::new(_fbb);
            if let Some(x) = args.dns_partners {
                builder.add_dns_partners(x);
            }
            if let Some(x) = args.in_id {
                builder.add_in_id(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(QueryPartnersOut::VT_ID, None) }
        }
        #[inline]
        pub fn in_id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(QueryPartnersOut::VT_IN_ID, None) }
        }
        #[inline]
        pub fn dns_partners(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DnsTerminal<'a>>>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DnsTerminal>>>>(
                        QueryPartnersOut::VT_DNS_PARTNERS,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for QueryPartnersOut<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<super::base::UlidBytes>("in_id", Self::VT_IN_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<DnsTerminal>>>>(
                    "dns_partners",
                    Self::VT_DNS_PARTNERS,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct QueryPartnersOutArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub in_id: Option<&'a super::base::UlidBytes>,
        pub dns_partners: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DnsTerminal<'a>>>>>,
    }
    impl<'a> Default for QueryPartnersOutArgs<'a> {
        #[inline]
        fn default() -> Self {
            QueryPartnersOutArgs {
                id: None,
                in_id: None,
                dns_partners: None,
            }
        }
    }

    pub struct QueryPartnersOutBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> QueryPartnersOutBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(QueryPartnersOut::VT_ID, id);
        }
        #[inline]
        pub fn add_in_id(&mut self, in_id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(QueryPartnersOut::VT_IN_ID, in_id);
        }
        #[inline]
        pub fn add_dns_partners(&mut self, dns_partners: flatbuffers::WIPOffset<flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<DnsTerminal<'b>>>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(QueryPartnersOut::VT_DNS_PARTNERS, dns_partners);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> QueryPartnersOutBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            QueryPartnersOutBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<QueryPartnersOut<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for QueryPartnersOut<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("QueryPartnersOut");
            ds.field("id", &self.id());
            ds.field("in_id", &self.in_id());
            ds.field("dns_partners", &self.dns_partners());
            ds.finish()
        }
    }
    pub enum QueryPartnersInOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct QueryPartnersIn<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for QueryPartnersIn<'a> {
        type Inner = QueryPartnersIn<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> QueryPartnersIn<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_TERMINAL: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            QueryPartnersIn { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args QueryPartnersInArgs<'args>,
        ) -> flatbuffers::WIPOffset<QueryPartnersIn<'bldr>> {
            let mut builder = QueryPartnersInBuilder::new(_fbb);
            if let Some(x) = args.terminal {
                builder.add_terminal(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> Option<&'a super::base::UlidBytes> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::UlidBytes>(QueryPartnersIn::VT_ID, None) }
        }
        #[inline]
        pub fn terminal(&self) -> Option<DnsTerminal<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<DnsTerminal>>(QueryPartnersIn::VT_TERMINAL, None) }
        }
    }

    impl flatbuffers::Verifiable for QueryPartnersIn<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::UlidBytes>("id", Self::VT_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<DnsTerminal>>("terminal", Self::VT_TERMINAL, false)?
                .finish();
            Ok(())
        }
    }
    pub struct QueryPartnersInArgs<'a> {
        pub id: Option<&'a super::base::UlidBytes>,
        pub terminal: Option<flatbuffers::WIPOffset<DnsTerminal<'a>>>,
    }
    impl<'a> Default for QueryPartnersInArgs<'a> {
        #[inline]
        fn default() -> Self {
            QueryPartnersInArgs { id: None, terminal: None }
        }
    }

    pub struct QueryPartnersInBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> QueryPartnersInBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_id(&mut self, id: &super::base::UlidBytes) {
            self.fbb_.push_slot_always::<&super::base::UlidBytes>(QueryPartnersIn::VT_ID, id);
        }
        #[inline]
        pub fn add_terminal(&mut self, terminal: flatbuffers::WIPOffset<DnsTerminal<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<DnsTerminal>>(QueryPartnersIn::VT_TERMINAL, terminal);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> QueryPartnersInBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            QueryPartnersInBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<QueryPartnersIn<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for QueryPartnersIn<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("QueryPartnersIn");
            ds.field("id", &self.id());
            ds.field("terminal", &self.terminal());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `DiscoveryFrame`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_discovery_frame_unchecked`.
    pub fn root_as_discovery_frame(buf: &[u8]) -> Result<DiscoveryFrame, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<DiscoveryFrame>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `DiscoveryFrame` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_discovery_frame_unchecked`.
    pub fn size_prefixed_root_as_discovery_frame(buf: &[u8]) -> Result<DiscoveryFrame, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<DiscoveryFrame>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `DiscoveryFrame` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_discovery_frame_unchecked`.
    pub fn root_as_discovery_frame_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<DiscoveryFrame<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<DiscoveryFrame<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `DiscoveryFrame` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_discovery_frame_unchecked`.
    pub fn size_prefixed_root_as_discovery_frame_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<DiscoveryFrame<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<DiscoveryFrame<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a DiscoveryFrame and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `DiscoveryFrame`.
    pub unsafe fn root_as_discovery_frame_unchecked(buf: &[u8]) -> DiscoveryFrame {
        flatbuffers::root_unchecked::<DiscoveryFrame>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed DiscoveryFrame and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `DiscoveryFrame`.
    pub unsafe fn size_prefixed_root_as_discovery_frame_unchecked(buf: &[u8]) -> DiscoveryFrame {
        flatbuffers::size_prefixed_root_unchecked::<DiscoveryFrame>(buf)
    }
    #[inline]
    pub fn finish_discovery_frame_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<DiscoveryFrame<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_discovery_frame_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<DiscoveryFrame<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod net_discovery
