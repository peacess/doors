// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::{cmp::Ordering, mem};

use crate::base_generated::*;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod net_discovery {

    use core::{cmp::Ordering, mem};

    use crate::base_generated::*;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum RegestryOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Regestry<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Regestry<'a> {
        type Inner = Regestry<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Regestry<'a> {
        pub const VT_PARTER_ID: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Regestry { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args RegestryArgs<'args>,
        ) -> flatbuffers::WIPOffset<Regestry<'bldr>> {
            let mut builder = RegestryBuilder::new(_fbb);
            if let Some(x) = args.parter_id {
                builder.add_parter_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn parter_id(&self) -> Option<&'a super::base::PartnerId> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<super::base::PartnerId>(Regestry::VT_PARTER_ID, None) }
        }
    }

    impl flatbuffers::Verifiable for Regestry<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<super::base::PartnerId>("parter_id", Self::VT_PARTER_ID, false)?
                .finish();
            Ok(())
        }
    }
    pub struct RegestryArgs<'a> {
        pub parter_id: Option<&'a super::base::PartnerId>,
    }
    impl<'a> Default for RegestryArgs<'a> {
        #[inline]
        fn default() -> Self {
            RegestryArgs { parter_id: None }
        }
    }

    pub struct RegestryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RegestryBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_parter_id(&mut self, parter_id: &super::base::PartnerId) {
            self.fbb_.push_slot_always::<&super::base::PartnerId>(Regestry::VT_PARTER_ID, parter_id);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RegestryBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            RegestryBuilder { fbb_: _fbb, start_: start }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Regestry<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Regestry<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Regestry");
            ds.field("parter_id", &self.parter_id());
            ds.finish()
        }
    }
} // pub mod net_discovery
