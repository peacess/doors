// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package idl

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Int128_64 struct {
	_tab flatbuffers.Struct
}

func (rcv *Int128_64) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Int128_64) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Int128_64) I1() int64 {
	return rcv._tab.GetInt64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Int128_64) MutateI1(n int64) bool {
	return rcv._tab.MutateInt64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Int128_64) I2() int64 {
	return rcv._tab.GetInt64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Int128_64) MutateI2(n int64) bool {
	return rcv._tab.MutateInt64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateInt128_64(builder *flatbuffers.Builder, i1 int64, i2 int64) flatbuffers.UOffsetT {
	builder.Prep(8, 16)
	builder.PrependInt64(i2)
	builder.PrependInt64(i1)
	return builder.Offset()
}
