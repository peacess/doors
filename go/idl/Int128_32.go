// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package idl

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Int128_32 struct {
	_tab flatbuffers.Struct
}

func (rcv *Int128_32) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Int128_32) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Int128_32) I1() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Int128_32) MutateI1(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Int128_32) I2() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Int128_32) MutateI2(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *Int128_32) I3() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Int128_32) MutateI3(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *Int128_32) I4() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *Int128_32) MutateI4(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func CreateInt128_32(builder *flatbuffers.Builder, i1 int32, i2 int32, i3 int32, i4 int32) flatbuffers.UOffsetT {
	builder.Prep(4, 16)
	builder.PrependInt32(i4)
	builder.PrependInt32(i3)
	builder.PrependInt32(i2)
	builder.PrependInt32(i1)
	return builder.Offset()
}
