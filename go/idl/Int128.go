// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package idl

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Int128 struct {
	_tab flatbuffers.Struct
}

func (rcv *Int128) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Int128) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Int128) I1() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Int128) MutateI1(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Int128) I2() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *Int128) MutateI2(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *Int128) I3() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *Int128) MutateI3(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *Int128) I4() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(3))
}
func (rcv *Int128) MutateI4(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(3), n)
}

func (rcv *Int128) I5() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Int128) MutateI5(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *Int128) I6() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(5))
}
func (rcv *Int128) MutateI6(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(5), n)
}

func (rcv *Int128) I7() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}
func (rcv *Int128) MutateI7(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func (rcv *Int128) I8() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(7))
}
func (rcv *Int128) MutateI8(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(7), n)
}

func CreateInt128(builder *flatbuffers.Builder, i1 int8, i2 int8, i3 int8, i4 int8, i5 int8, i6 int8, i7 int8, i8 int8) flatbuffers.UOffsetT {
	builder.Prep(1, 8)
	builder.PrependInt8(i8)
	builder.PrependInt8(i7)
	builder.PrependInt8(i6)
	builder.PrependInt8(i5)
	builder.PrependInt8(i4)
	builder.PrependInt8(i3)
	builder.PrependInt8(i2)
	builder.PrependInt8(i1)
	return builder.Offset()
}
